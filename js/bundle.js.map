{"version":3,"sources":["webpack:///webpack/bootstrap b144bc4a22146dfa4725","webpack:///./js/bitboard/index.js","webpack:///./js/pieces/index.js","webpack:///./js/pieces/constants.js","webpack:///./js/pieces/movements/dir_constants.js","webpack:///./js/pieces/movements/masks.js","webpack:///./js/pieces/movements/slide_moves.js","webpack:///./js/bitboard/bitboard.js","webpack:///./js/pieces/movements/step_move.js","webpack:///./js/ui/constants.js","webpack:///./js/app.js","webpack:///./js/ui/index.js","webpack:///./js/position/index.js","webpack:///./js/bitboard/utils.js","webpack:///./js/bitboard/masks.js","webpack:///./js/move/index.js","webpack:///./js/move/constants.js","webpack:///./js/pieces/pawns.js","webpack:///./js/pieces/knight.js","webpack:///./js/pieces/bishop.js","webpack:///./js/pieces/rook.js","webpack:///./js/pieces/queen.js","webpack:///./js/pieces/king.js","webpack:///./js/pieces/conversions.js","webpack:///./js/position/utils/array_conversions.js","webpack:///./js/ai/index.js","webpack:///./js/ui/util.js"],"names":["BitBoard","require","Masks","module","exports","BBMasks","Constants","Pawns","Knight","Bishop","Rook","Queen","King","PieceConv","Dirs","PieceTypes","Types","Colors","PieceTypeHTML","WHITE","BLACK","PAWNS","KNIGHTS","BISHOPS","ROOKS","QUEENS","KINGS","PieceTypeLetters","DIRS","stepMove","generateStepBitBoards","dirs","res","pos","initial","posRes","addMove","currRes","dir","or","fromPos","reduce","push","KNIGHT_MOVES","KING_MOVES","SLIDE_MOVES","moves","colIdx","rowIdx","diagIdx","antiDiagIdx","Math","floor","NORTH","COLS","and","NORTH_OF_ROW","SOUTH","SOUTH_OF_ROW","EAST","ROWS","EAST_OF_COL","WEST","WEST_OF_COL","NOEA","DIAGS","SOWE","NOWE","ANTI_DIAGS","SOEA","isPosRay","findUnblocked","occupied","posBB","dirBB","blocking","blockingPos","isZero","bitScanForward","bitScanReverse","xor","horizVert","notOwnPieces","diag","Utils","low","high","other","numBits","newLowBits","newHighBits","count","int32","popCount32","pow","bitScanForward32","Boolean","bitScanReverse32","cb","clearLeastSigBit32","row","posVal","console","log","length","setBit","positions","forEach","colNum","rowNum","posMax","startPos","noSo","eaWe","shiftLeft","shiftRight","ColsFiles","FilesCols","file","col","RowsRanks","RanksRows","rank","Selectors","BOARD_ID","PIECE_CLASS","SQUARE_CLASS","RANK_CLASS","FILE_CLASS","UI","$","document","ready","ui","run","Position","AI","Util","position","playerColor","ai","currMoves","generateLegalMoves","makePlayerMove","bind","drawBoard","playNextTurn","updatePieces","turn","setupPlayerMove","setTimeout","aiMove","newRow","append","fileRank","newSquare","squareColor","isDarkSquare","addClass","table","newRankRow","generateSquare","prepend","generateFileHeader","remove","removeClass","pieceTypes","Object","values","pieces","newPiece","pieceType","dup","pop1Bits","hasSetBit","fileRankFromPos","makeMove","toPos","selectedMove","filter","move","getFrom","getTo","movesData","map","getData","moveFromTos","moveData","from","to","fromFileRank","toFileRank","droppedPieceSource","selectedMoves","keys","draggable","mouseenter","mouseleave","droppable","drop","event","parent","attr","posFromFileRank","Move","MoveTypes","pieceSetsToArray","pieceSetsFromArray","prevMoves","castleRights","epBB","prevStates","setTurn","opp","getOtherColor","color","includeQuiet","addPawnMoves","addNormalMoves","addKingMoves","pseudoMoves","generatePseudoMoves","isLegal","legals","pseudoMove","testMove","testsLegal","pawnsPos","getColorPieceSet","notOccupied","getOccupied","not","pawnSinglePushes","singlePush","addPawnMoveSet","pawnDoublePushes","doublePush","oppPositions","pawnLeftAttacks","attacksLeft","pawnRightAttacks","attacksRight","newPositions","shiftAmt","isCapture","isDblPush","captured","DBL_PPUSH","EP_CAPT","getPieceAt","PROMO_MASKS","addPromos","NORMAL","NPROMO","BPROMO","RPROMO","QPROMO","promoType","getNotOccupiedBy","knightsPos","knightMoves","addNormalMoveSet","bishopsPos","bishopMoves","rooksPos","rookMoves","queenPos","queenMoves","kingPos","normalMoves","addCastleMoves","newPos","newMove","captType","turnCastleRights","getCastleRights","INIT_POS","canCastle","CSTL_QUEEN","CSTL_KING","types","idx","type","addPrevState","adjustCastleRights","captPieceType","execMoveType","swapTurn","clearPieceAt","isPromo","movePiece","undo","setPieceAt","isCastle","isLegalCastle","inCheck","castleType","isAttacked","oppColor","pawns","queenBB","prevMove","pop","reverseMoveType","prevState","clearCastlePos","clearCastleRightsMask","state","epPos","capturedPos","clearBit","boardType","render","boardArr","rowStr","int","generateMSBTable","max","log2","mostSigBitTable","FULL_BOARD","cols","fromCol","rows","fromRow","diags","upperRightDiag","antiDiags","upperLeftDiag","bb","piece","captPiece","val","getType","getPiece","getCaptPiece","includes","typesArr","INIT_MASKS","value","positionValues","oppPieces","onePush","castleSlide","popCount","pieceToLetter","toUpperCase","letterToColor","letter","letterToType","toLowerCase","xx","WP","WN","WB","WR","WQ","WK","BP","BN","BB","BR","BQ","BK","defaultBoardArr","createEmptyBoardArr","array","piecePositions","pieceConstant","sum","turnPawns","sumPieceSetScore","turnKnights","turnBishops","turnRooks","turnQueenPos","sumPieceScore","turnKingPos","oppPawns","oppKnights","oppBishops","oppRooks","oppQueenPos","oppKingPos","maxDepth","negaMax","Infinity","bestMove","alpha","beta","standPatVal","evaluate","sortMoves","moveIdx","score","quiescenceSearch","unmakePrevMove","depth","canMove","bestScore","calculateScore","sort","moveA","moveB","split"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b144bc4a22146dfa4725","const BitBoard = require('./bitboard.js');\nconst Masks = require('./masks.js');\n\nmodule.exports = {\n  BitBoard,\n  BBMasks: Masks,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./js/bitboard/index.js","// const { WhitePawns, BlackPawns } = require('./pawns.js');\nconst Constants = require('./constants.js');\nconst Pawns = require('./pawns.js');\nconst Knight = require('./knight.js');\nconst Bishop = require('./bishop.js');\nconst Rook = require('./rook.js');\nconst Queen = require('./queen.js');\nconst King = require('./king.js');\nconst PieceConv = require('./conversions.js');\nconst Dirs = require('./movements/dir_constants.js');\n\nmodule.exports = {\n  PieceTypes: Constants.Types,\n  Colors: Constants.Colors,\n  PieceTypeHTML: Constants.PieceTypeHTML,\n  Dirs,\n  Pawns,\n  Knight,\n  Bishop,\n  Rook,\n  Queen,\n  King,\n  PieceConv\n};\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/index.js","const Colors = {\n  WHITE: 0,\n  BLACK: 1\n};\n\nconst Types = {\n  PAWNS: 2,\n  KNIGHTS: 3,\n  BISHOPS: 4,\n  ROOKS: 5,\n  QUEENS: 6,\n  KINGS: 7\n};\n\nconst PieceTypeLetters = {\n  [Types.PAWNS]: 'p',\n  [Types.KNIGHTS]: 'n',\n  [Types.BISHOPS]: 'b',\n  [Types.ROOKS]: 'r',\n  [Types.QUEENS]: 'q',\n  [Types.KINGS]: 'k',\n};\n\nconst PieceTypeHTML = {\n  [Types.PAWNS]: '&#9823;',\n  [Types.KNIGHTS]: '&#9822;',\n  [Types.BISHOPS]: '&#9821;',\n  [Types.ROOKS]: '&#9820;',\n  [Types.QUEENS]: '&#9819;',\n  [Types.KINGS]: '&#9818;',\n};\n\nmodule.exports = { Types, Colors, PieceTypeLetters, PieceTypeHTML };\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/constants.js","const DIRS = {\n  'NORTH': 0,\n  'SOUTH': 1,\n  'EAST': 2,\n  'WEST': 3,\n  'NOEA': 4,\n  'NOWE': 5,\n  'SOEA': 6,\n  'SOWE': 7\n};\n\nmodule.exports = DIRS;\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/movements/dir_constants.js","const { BitBoard, BBMasks } = require('../../bitboard');\nconst Dirs = require('./dir_constants.js');\nconst stepMove = require('./step_move.js');\n\nfunction generateStepBitBoards(dirs) {\n  const res = [];\n  let pos = 0;\n  let initial;\n  let posRes;\n\n  const addMove = (currRes, dir) => {\n    return currRes.or(stepMove(initial, dir[0], dir[1]));\n  };\n\n  while (pos < 64) {\n    initial = BitBoard.fromPos(pos);\n    posRes = dirs.reduce((currRes, dir) => addMove(currRes, dir), new BitBoard());\n    res.push(posRes);\n    pos++;\n  }\n\n  return res;\n}\n\nconst KNIGHT_MOVES = function() {\n  const dirs = [[1, 2], [1, -2],\n                [2, 1], [2, -1],\n                [-1, 2], [-1, -2],\n                [-2, 1], [-2, -1]];\n\n  return generateStepBitBoards(dirs);\n}();\n\nconst KING_MOVES = function() {\n  const dirs = [[1, 0], [1, 1],\n                [1, -1],[-1, 0],\n                [-1, 1], [-1, -1],\n                [0, -1], [0, 1]];\n\n  return generateStepBitBoards(dirs);\n}();\n\nconst SLIDE_MOVES = function() {\n  let pos = 0;\n  const res = [];\n  let moves;\n  let colIdx;\n  let rowIdx;\n  let diagIdx;\n  let antiDiagIdx;\n\n  while (pos < 64) {\n    moves = {};\n    rowIdx = Math.floor(pos / 8);\n    colIdx = pos % 8;\n    diagIdx = (pos < rowIdx * 9) ? (pos % 9) - 2 : (pos % 9) + 7;\n    if (pos === 63) {\n      antiDiagIdx = 14;\n    } else {\n      antiDiagIdx = (pos < (rowIdx + 1) * 7) ? (pos % 7) : (pos % 7) + 7;\n    }\n    moves[Dirs.NORTH] = BBMasks.COLS[colIdx].and(BBMasks.NORTH_OF_ROW[rowIdx]);\n    moves[Dirs.SOUTH] = BBMasks.COLS[colIdx].and(BBMasks.SOUTH_OF_ROW[rowIdx]);\n    moves[Dirs.EAST] = BBMasks.ROWS[rowIdx].and(BBMasks.EAST_OF_COL[colIdx]);\n    moves[Dirs.WEST] = BBMasks.ROWS[rowIdx].and(BBMasks.WEST_OF_COL[colIdx]);\n    moves[Dirs.NOEA] = BBMasks.DIAGS[diagIdx].and(BBMasks.NORTH_OF_ROW[rowIdx]);\n    moves[Dirs.SOWE] = BBMasks.DIAGS[diagIdx].and(BBMasks.SOUTH_OF_ROW[rowIdx]);\n    moves[Dirs.NOWE] = BBMasks.ANTI_DIAGS[antiDiagIdx].and(BBMasks.NORTH_OF_ROW[rowIdx]);\n    moves[Dirs.SOEA] = BBMasks.ANTI_DIAGS[antiDiagIdx].and(BBMasks.SOUTH_OF_ROW[rowIdx]);\n    res.push(moves);\n    pos++;\n  }\n\n  return res;\n}();\n\nmodule.exports = {\n  KNIGHT_MOVES,\n  KING_MOVES,\n  SLIDE_MOVES,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/movements/masks.js","const { BitBoard } = require('../../bitboard');\nconst { SLIDE_MOVES } = require('./masks.js');\nconst Dirs = require('./dir_constants.js');\n\nconst isPosRay = {\n  [Dirs.NORTH]: true,\n  [Dirs.EAST]: true,\n  [Dirs.NOEA]: true,\n  [Dirs.NOWE]: true,\n  [Dirs.SOUTH]: false,\n  [Dirs.WEST]: false,\n  [Dirs.SOEA]: false,\n  [Dirs.SOWE]: false\n};\n\nfunction findUnblocked(pos, occupied, dir) {\n  const posBB = new BitBoard();\n  const dirBB = SLIDE_MOVES[pos][dir];\n  const blocking = dirBB.and(occupied);\n  let blockingPos;\n\n  if (blocking.isZero()) {\n    return dirBB;\n  } else {\n    blockingPos = isPosRay[dir] ? blocking.bitScanForward() : blocking.bitScanReverse();\n    return dirBB.xor(SLIDE_MOVES[blockingPos][dir]);\n  }\n}\n\nfunction horizVert(pos, occupied, notOwnPieces) {\n  return [Dirs.NORTH, Dirs.SOUTH, Dirs.EAST, Dirs.WEST].reduce((res, dir) => {\n    return res.or(findUnblocked(pos, occupied, dir));\n  }, new BitBoard()).and(notOwnPieces);\n}\n\nfunction diag(pos, occupied, notOwnPieces) {\n  return [Dirs.NOEA, Dirs.NOWE, Dirs.SOEA, Dirs.SOWE].reduce((res, dir) => {\n    return res.or(findUnblocked(pos, occupied, dir));\n  }, new BitBoard()).and(notOwnPieces);\n}\n\nmodule.exports = {\n  horizVert,\n  diag\n};\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/movements/slide_moves.js","const Utils = require('./utils.js');\n// A standard 8x8 chess board can be represented by a 64bit integer (bitboard),\n// in which a 1 means the position is occupied, a 0 means it's empty\n\n// We use several of these bitboards to represent a chess position\n// for example, the current set of pieces is represented by a bitboard\n// for each piece type and color\n\n// Since Javascript doesn't support bitwise operations for 64bit integers,\n// we implement most of those operations here, separating the 64bit int\n// into its low 32bit and high 32bit components\n\n//56 57 58 59 60 61 62 63\n//48 49 50 51 52 53 54 55  ^\n//40 41 42 43 44 45 46 47  |\n//32 33 34 35 36 37 38 39 HIGH\n//24 25 26 27 28 29 30 31 LOW\n//16 17 18 19 20 21 22 23  |\n// 8  9 10 11 12 13 14 15  v\n// 0  1  2  3  4  5  6  7\n\nclass BitBoard {\n  constructor(low, high) {\n    this.low = (low || 0) >>> 0;\n    this.high = (high || 0) >>> 0;\n  }\n\n  and(other) {\n    return new BitBoard(this.low & other.low, this.high & other.high);\n  }\n\n  or(other) {\n    return new BitBoard(this.low | other.low, this.high | other.high);\n  }\n\n  xor(other) {\n    return new BitBoard(this.low ^ other.low, this.high ^ other.high);\n  }\n\n  not() {\n    return new BitBoard(~this.low, ~this.high);\n  }\n\n  equals(other) {\n    return (this.low === other.low && this.high === other.high);\n  }\n\n  greaterThan(other) {\n    return (this.high > other.high || this.low > other.low);\n  }\n\n  lessThan(other) {\n    return (this.high < other.high || this.low < other.low);\n  }\n\n  isZero() {\n    return (this.high === 0 && this.low === 0);\n  }\n\n  shiftRight(numBits) {\n    let newLowBits, newHighBits;\n\n    if (numBits <= 0) {\n      return new BitBoard(this.low, this.high);\n    } else if (numBits > 63) {\n      return new BitBoard();\n    } else if (numBits >= 32) {\n      newLowBits = this.high >>> (numBits - 32);\n      newHighBits = 0;\n    } else {\n      newLowBits = (this.low >>> numBits) | (this.high << (32 - numBits));\n      newHighBits = this.high >>> numBits;\n    }\n\n    return new BitBoard(newLowBits, newHighBits);\n  }\n\n  shiftLeft(numBits) {\n    let newLowBits, newHighBits;\n\n    if (numBits <= 0) {\n      return new BitBoard(this.low, this.high);\n    } else if (numBits > 63) {\n      return new BitBoard();\n    } else if (numBits >= 32) {\n      newLowBits = 0;\n      newHighBits = (this.low << (numBits - 32)) >>> 0;\n    } else {\n      newLowBits = (this.low << numBits) >>> 0;\n      newHighBits =  ((this.low >>> (32 - numBits)) | (this.high << numBits)) >>> 0;\n    }\n\n    return new BitBoard(newLowBits, newHighBits);\n  }\n\n  popCount() {\n      return [this.low, this.high].reduce((count, int32) => {\n        return count + Utils.popCount32(int32);\n      }, 0);\n  }\n\n  setBit(pos) {\n    if (pos >= 32 && pos < 64) {\n      this.high = (this.high | Math.pow(2, pos - 32)) >>> 0;\n    } else if (pos >= 0 && pos < 32) {\n      this.low = (this.low | Math.pow(2, pos)) >>> 0;\n    }\n  }\n\n  clearBit(pos) {\n    if (pos >= 32 && pos < 64) {\n      this.high = (this.high & (~Math.pow(2, pos - 32))) >>> 0;\n    } else if (pos >= 0 && pos < 32) {\n      this.low = (this.low & (~Math.pow(2, pos))) >>> 0;\n    }\n  }\n\n  bitScanForward() {\n    if (this.low) {\n      return Utils.bitScanForward32(this.low);\n    } else if (this.high) {\n      return Utils.bitScanForward32(this.high) + 32;\n    } else {\n      return null;\n    }\n  }\n\n  hasSetBit(pos) {\n    if (pos < 32) {\n      return Boolean(this.low & Math.pow(2, pos));\n    } else {\n      return Boolean(this.high & Math.pow(2, pos - 32));\n    }\n  }\n\n  bitScanReverse() {\n    if (this.high) {\n      return Utils.bitScanReverse32(this.high) + 32;\n    } else if (this.low) {\n      return Utils.bitScanReverse32(this.low);\n    } else {\n      return null;\n    }\n  }\n\n  pop1Bits(cb) {\n    while (this.low) {\n      cb(Utils.bitScanForward32(this.low));\n      this.low = Utils.clearLeastSigBit32(this.low);\n    }\n\n    while (this.high) {\n      cb(Utils.bitScanForward32(this.high) + 32);\n      this.high = Utils.clearLeastSigBit32(this.high);\n    }\n  }\n\n  dup() {\n    return new BitBoard(this.low, this.high);\n  }\n\n  static fromPos(pos) {\n    const res = new BitBoard();\n    res.setBit(pos);\n\n    return res;\n  }\n\n  static fromPositions(positions) {\n    const res = new BitBoard();\n\n    positions.forEach((pos) => {\n      res.setBit(pos);\n    });\n\n    return res;\n  }\n\n  static fromCol(colNum) {\n    const res = new BitBoard();\n    if (colNum < 0 || colNum > 7) { return res; }\n    let pos = colNum;\n\n    while (pos < 64) {\n      res.setBit(pos);\n      pos += 8;\n    }\n\n    return res;\n  }\n\n  static fromRow(rowNum) {\n    const res = new BitBoard();\n    if (rowNum < 0 || rowNum > 7) { return res; }\n\n    let pos = rowNum * 8;\n    let posMax = pos + 7;\n\n    while (pos <= posMax) {\n      res.setBit(pos);\n      pos++;\n    }\n\n    return res;\n  }\n\n  static upperRightDiag(startPos) {\n    const res = BitBoard.fromPos(startPos);\n    if (startPos < 0 || startPos > 63) { return res; }\n    let pos = startPos + 9;\n\n    while (pos < 64 && pos % 8 !== 0) {\n      res.setBit(pos);\n      pos += 9;\n    }\n\n    return res;\n  }\n\n  static upperLeftDiag(startPos) {\n    const res = new BitBoard();\n    if (startPos < 0 || startPos > 63) { return res; }\n    let pos = startPos;\n\n    while (pos < 64 && pos % 8 !== 0) {\n      res.setBit(pos);\n      pos += 7;\n    }\n\n    if (pos < 64) {\n      res.setBit(pos);\n    }\n\n    return res;\n  }\n\n  render() {\n    let row = '';\n    let pow = 63;\n    let posVal;\n    console.log('------');\n    while (pow >= 32) {\n      posVal = (Math.pow(2, pow - 32) & this.high) === 0 ? '0' : '1';\n      row = posVal + row;\n      if (row.length === 8) {\n        console.log(row);\n        row = '';\n      }\n      pow--;\n    }\n\n    while (pow >= 0) {\n      posVal = (Math.pow(2, pow) & this.low) === 0 ? '0' : '1';\n      row = posVal + row;\n      if (row.length === 8) {\n        console.log(row);\n        row = '';\n      }\n      pow--;\n    }\n    console.log('------');\n  }\n}\n\n\nmodule.exports = BitBoard;\n\n\n\n// WEBPACK FOOTER //\n// ./js/bitboard/bitboard.js","const { BitBoard, BBMasks } = require('../../bitboard');\n\nfunction stepMove(initial, noSo, eaWe) {\n  let positions = initial;\n\n  if (noSo > 0) {\n    positions = positions.shiftLeft(noSo * 8);\n  } else if (noSo < 0){\n    positions = positions.shiftRight(noSo * -8);\n  }\n\n  if (eaWe > 0) {\n    positions = positions.shiftLeft(eaWe).and(BBMasks.EAST_OF_COL[eaWe - 1]);\n  } else if (eaWe < 0){\n    positions = positions.shiftRight(-eaWe).and(BBMasks.WEST_OF_COL[eaWe + 8]);\n  }\n\n  return positions;\n}\n\nmodule.exports = stepMove;\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/movements/step_move.js","const ColsFiles = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n\nconst FilesCols = function() {\n  return ColsFiles.reduce((res, file, col) => {\n    res[file] = col;\n    return res;\n  }, {});\n}();\n\nconst RowsRanks = ['1', '2', '3', '4', '5', '6', '7', '8'];\n\nconst RanksRows = function() {\n  return RowsRanks.reduce((res, rank, row) => {\n    res[rank] = row;\n    return res;\n  }, {});\n}();\n\nconst Selectors = {\n  BOARD_ID: \"#board\",\n  PIECE_CLASS: 'piece',\n  SQUARE_CLASS: 'square',\n  RANK_CLASS: 'rank',\n  FILE_CLASS: 'file'\n};\n\n// const PieceCharsToHTML = []{\n//   'k': '&#9812;',\n//   'q':\n//\n// };\n\nmodule.exports = { ColsFiles, FilesCols, RowsRanks, RanksRows, Selectors };\n\n\n\n// WEBPACK FOOTER //\n// ./js/ui/constants.js","const UI = require('./ui');\n\n$(document).ready(function() {\n  const ui = new UI();\n  ui.run();\n});\n\n\n\n// WEBPACK FOOTER //\n// ./js/app.js","const Position = require('../position');\nconst AI = require('../ai');\nconst { PieceTypes, Colors, PieceTypeHTML } = require('../pieces');\nconst Util = require('./util.js');\nconst { ColsFiles, FilesCols,\n        RowsRanks, RanksRows,\n        Selectors } = require('./constants.js');\n\nclass UI {\n  constructor() {\n    this.position = new Position();\n    this.playerColor = Colors.WHITE;\n    this.ai = new AI();\n    this.currMoves = this.position.generateLegalMoves();\n    this.makePlayerMove = this.makePlayerMove.bind(this);\n  }\n\n  run() {\n    this.drawBoard();\n    this.playNextTurn();\n  }\n\n  playNextTurn() {\n    this.updatePieces();\n    this.currMoves = this.position.generateLegalMoves();\n    if (this.currMoves.length === 0) {\n      return;\n    }\n\n    if (this.position.turn === this.playerColor) {\n      this.setupPlayerMove();\n    } else {\n      setTimeout(() => this.aiMove(), 0);\n    }\n\n  }\n\n  reset() {\n\n  }\n\n  generateFileHeader() {\n    const newRow = $('<tr></tr>');\n    newRow.append(`<th>`);\n    ColsFiles.forEach((file) => {\n      newRow.append(`<th class=\"file\">${file}</th>`);\n    });\n    newRow.append(`<th>`);\n\n    return newRow;\n  }\n\n  generateSquare(file, rank) {\n    const fileRank = file + rank;\n\n    const newSquare = $(`<td id=\"${fileRank}\"></td>`);\n\n    const squareColor = Util.isDarkSquare(fileRank) ? 'dark' : 'light';\n    newSquare.addClass(squareColor + \" square\");\n\n    return newSquare;\n  }\n\n  drawBoard() {\n    const table = $('<table>');\n\n    let newRankRow;\n    RowsRanks.forEach((rank) => {\n      newRankRow = $('<tr>');\n      newRankRow.append(`<th class=\"rank\">${rank}</th>`);\n      ColsFiles.forEach((file) => {\n        newRankRow.append(this.generateSquare(file, rank));\n      });\n      newRankRow.append(`<th class=\"rank\">${rank}</th>`);\n      table.prepend(newRankRow);\n    });\n\n    table.prepend(this.generateFileHeader());\n    table.append(this.generateFileHeader());\n    $('#board').append(table);\n  }\n\n  updatePieces() {\n    $('.piece').remove();\n    $('.square').removeClass('ui-droppable ui-draggable can-move-to');\n    const pieceTypes = Object.values(PieceTypes);\n    const pieces = this.position.pieces;\n    let fileRank;\n    let newPiece;\n\n    pieceTypes.forEach((pieceType) => {\n      pieces[pieceType].dup().pop1Bits((pos) => {\n        newPiece = $(`<div class=\"piece\">${PieceTypeHTML[pieceType]}<div>`);\n        if (pieces[Colors.WHITE].hasSetBit(pos)) {\n          newPiece.addClass('white');\n        } else {\n          newPiece.addClass('black');\n        }\n        fileRank = Util.fileRankFromPos(pos);\n        $(`#${fileRank}`).append(newPiece);\n      });\n    });\n  }\n\n  aiMove() {\n    this.ai.makeMove(this.position, this.currMoves);\n    this.playNextTurn();\n  }\n\n  makePlayerMove(fromPos, toPos) {\n    const selectedMove = this.currMoves.filter((move) => {\n      return move.getFrom() === fromPos &&\n             move.getTo() === toPos;\n    })[0];\n    if (selectedMove) {\n      this.position.makeMove(selectedMove);\n      this.playNextTurn();\n    } else {\n      this.updatePieces();\n      this.setupPlayerMove();\n    }\n  }\n\n  setupPlayerMove() {\n    const moves = this.position.generateLegalMoves();\n    const movesData = moves.map((move) => move.getData());\n    const moveFromTos = {};\n\n    movesData.forEach((moveData) => {\n      moveFromTos[moveData.from] = moveFromTos[moveData.from] || [];\n      moveFromTos[moveData.from].push(moveData.to);\n    });\n\n    let fromFileRank;\n    let toFileRank;\n    let droppedPieceSource;\n    let selectedMoves;\n\n    Object.keys(moveFromTos).forEach((fromPos) => {\n      fromFileRank = Util.fileRankFromPos(fromPos);\n      $(`#${fromFileRank} .piece`).draggable();\n      $(`#${fromFileRank} .piece`).mouseenter(() => {\n        moveFromTos[fromPos].forEach( (toPos) => {\n          $(`#${Util.fileRankFromPos(toPos)}`).addClass('can-move-to');\n        });\n      });\n\n      $(`#${fromFileRank} .piece`).mouseleave(() => {\n        moveFromTos[fromPos].forEach( (toPos) => {\n          $(`#${Util.fileRankFromPos(toPos)}`).removeClass('can-move-to');\n        });\n      });\n\n      moveFromTos[fromPos].forEach( (toPos) => {\n        $(`#${Util.fileRankFromPos(toPos)}`).droppable({\n          drop: (event, ui) => {\n            droppedPieceSource = $(ui.draggable).parent().attr('id');\n            this.makePlayerMove(Util.posFromFileRank(droppedPieceSource), toPos);\n          }\n        });\n      });\n    });\n  }\n}\n\nmodule.exports = UI;\n\n\n\n// WEBPACK FOOTER //\n// ./js/ui/index.js","const { BitBoard, BBMasks } = require('../bitboard');\n\nconst { Move, MoveTypes } = require('../move');\n\nconst { Pawns, Knight, Bishop,\n        Rook, King, Queen,\n        PieceTypes, Colors, Dirs } = require('../pieces');\n\nconst { pieceSetsToArray,\n        pieceSetsFromArray } = require('./utils/array_conversions.js');\n\nclass Position {\n  constructor(pieces = pieceSetsFromArray(), turn = Colors.WHITE, prevMoves = []) {\n    this.pieces = pieces;\n    this.prevMoves = prevMoves;\n\n    // castling rights represented by 4bit int\n    // in the following order (left bit to right):\n    // bKing bQueen wKing wQueen\n    this.castleRights = 0xf;\n\n    // the en passant BB will either be empty\n    // or have one position marked that indicates\n    // the destination of an en passant attack\n    this.epBB = new BitBoard();\n\n    // holds previous state info (castling rights, en passant)\n    // for move reversal purposes\n    this.prevStates = [];\n\n    this.setTurn(turn);\n  }\n\n  setTurn(turn, opp) {\n    this.turn = turn;\n    this.opp = opp || this.getOtherColor(turn);\n  }\n\n  swapTurn() {\n    this.setTurn(this.opp, this.turn);\n  }\n\n  getOtherColor(color) {\n    return color ^ Colors.BLACK;\n  }\n\n  // generates all pseudo legal moves, ie moves that may put the king\n  // in check but are otherwise legal\n  // why do this: our ai move search generates all moves for a position\n  // and then considers each move individually. some of those moves\n  // will not be considered due to pruning cutoffs, so it's more efficient\n  // to only check for full legality of moves that we actually consider\n  generatePseudoMoves(includeQuiet = true) {\n    const moves = [];\n    this.addPawnMoves(moves, includeQuiet);\n    this.addNormalMoves(moves, includeQuiet);\n    this.addKingMoves(moves, includeQuiet);\n\n    return moves;\n  }\n\n  // generates moves with a filter for whether the move puts the king in check\n  // mainly used to determine checkmate or stalemate\n  generateLegalMoves() {\n    const pseudoMoves = this.generatePseudoMoves();\n    let moveData;\n    let isLegal;\n\n    const legals = [];\n    return pseudoMoves.filter((pseudoMove) => {\n      moveData = pseudoMove.getData();\n\n      this.testMove(moveData, (testsLegal) => {\n        isLegal = testsLegal;\n        return true;\n      });\n\n      return isLegal;\n    });\n  }\n\n  // inserts pawn moves into the moves array\n  addPawnMoves(moves, includeQuiet) {\n    const pawnsPos = this.getColorPieceSet(this.turn, PieceTypes.PAWNS);\n\n    if (includeQuiet) {\n      const notOccupied = this.getOccupied().not();\n\n      const pawnSinglePushes = Pawns.singlePush(this.turn, pawnsPos, notOccupied);\n      this.addPawnMoveSet(pawnSinglePushes, 8 * Pawns.DIRS[this.turn], moves);\n\n      const pawnDoublePushes = Pawns.doublePush(this.turn, pawnsPos, notOccupied);\n      this.addPawnMoveSet(pawnDoublePushes, 16 * Pawns.DIRS[this.turn], moves, false, true);\n    }\n\n    let oppPositions = this.pieces[this.opp].or(this.epBB);\n\n    const pawnLeftAttacks = Pawns.attacksLeft(this.turn, pawnsPos, oppPositions);\n    this.addPawnMoveSet(pawnLeftAttacks, 7 * Pawns.DIRS[this.turn], moves, true);\n\n    const pawnRightAttacks = Pawns.attacksRight(this.turn, pawnsPos, oppPositions);\n    this.addPawnMoveSet(pawnRightAttacks, 9 * Pawns.DIRS[this.turn], moves, true);\n  }\n\n  // takes a new position set for pawns and adds each corresponding move\n  // to the moves array, with special handling for en passants, promotions and double pushes\n\n  // note: unlike other pieces, we map pawn movements from the set of all existing pawns\n  // rather than each pawn individually, so the function takes a shift amount to determine\n  // the location of the individual pawn that moved to a new position\n  addPawnMoveSet(newPositions, shiftAmt, moves, isCapture, isDblPush) {\n    let from;\n    let captured = null;\n\n    newPositions.pop1Bits((pos) => {\n      from = pos - shiftAmt;\n      if (isDblPush) {\n        moves.push(new Move(from, pos, MoveTypes.DBL_PPUSH, PieceTypes.PAWNS));\n      } else if (isCapture && this.epBB.hasSetBit(pos)) {\n        moves.push(new Move(from, pos, MoveTypes.EP_CAPT, PieceTypes.PAWNS));\n      } else {\n        if (isCapture) { captured = this.getPieceAt(pos); }\n\n        if (Pawns.PROMO_MASKS[this.turn].hasSetBit(pos)) {\n          this.addPromos(from, pos, moves, captured);\n        } else {\n          moves.push(new Move(from, pos, MoveTypes.NORMAL, PieceTypes.PAWNS, captured));\n        }\n      }\n    });\n  }\n\n  // adds a move to the moves array for each possible promotion type\n\n  // side note: I was curious about why you'd ever promote to rook or bishop\n  // and the reason is if promoting to a queen results in stalemate\n  addPromos(from, to, moves, captured) {\n    [MoveTypes.NPROMO, MoveTypes.BPROMO,\n     MoveTypes.RPROMO, MoveTypes.QPROMO].forEach((promoType) => {\n       moves.push(new Move(from, to, promoType, PieceTypes.PAWNS, captured));\n     });\n  }\n\n  // adds moves to the moves array for all pieces that don't\n  // have 'special' moves, ie not pawns or kings\n  addNormalMoves(moves, includeQuiet) {\n    const occupied = this.getOccupied();\n    const notOwnPieces = this.getNotOccupiedBy(this.turn);\n\n    const knightsPos = this.getColorPieceSet(this.turn, PieceTypes.KNIGHTS);\n    let knightMoves;\n    knightsPos.dup().pop1Bits((pos) => {\n      knightMoves = Knight.moves(pos, notOwnPieces);\n      this.addNormalMoveSet(knightMoves, pos, PieceTypes.KNIGHTS, moves, includeQuiet);\n    });\n\n    const bishopsPos = this.getColorPieceSet(this.turn, PieceTypes.BISHOPS);\n    let bishopMoves;\n    bishopsPos.dup().pop1Bits((pos) => {\n      bishopMoves = Bishop.moves(pos, occupied, notOwnPieces);\n      this.addNormalMoveSet(bishopMoves, pos, PieceTypes.BISHOPS, moves, includeQuiet);\n    });\n\n    const rooksPos = this.getColorPieceSet(this.turn, PieceTypes.ROOKS);\n    let rookMoves;\n    rooksPos.dup().pop1Bits((pos) => {\n      rookMoves = Rook.moves(pos, occupied, notOwnPieces);\n      this.addNormalMoveSet(rookMoves, pos, PieceTypes.ROOKS, moves, includeQuiet);\n    });\n\n    const queenPos = this.getColorPieceSet(this.turn, PieceTypes.QUEENS).bitScanForward();\n    if (queenPos !== null) {\n      const queenMoves = Queen.moves(queenPos, occupied, notOwnPieces);\n      this.addNormalMoveSet(queenMoves, queenPos, PieceTypes.QUEENS, moves, includeQuiet);\n    }\n  }\n\n  // adds available king moves to the moves array\n  addKingMoves(moves, includeQuiet) {\n      const notOwnPieces = this.getNotOccupiedBy(this.turn);\n      const kingPos = this.getColorPieceSet(this.turn, PieceTypes.KINGS).bitScanForward();\n\n      // for testing purposes...\n      if (kingPos === null) { return; }\n\n      const normalMoves = King.moves(kingPos, notOwnPieces);\n      this.addNormalMoveSet(normalMoves, kingPos, PieceTypes.KINGS, moves, includeQuiet);\n\n      if (includeQuiet) {\n        this.addCastleMoves(moves);\n      }\n  }\n\n  // takes a BB of possible new positions for a single\n  // piece and adds each corresponding move to the moves array\n  addNormalMoveSet(newPositions, startPos, pieceType, moves, includeQuiet) {\n    let newPos;\n    let newMove;\n    let captType;\n\n    newPositions.pop1Bits((pos) => {\n      captType = this.pieces[this.opp].hasSetBit(pos) ? this.getPieceAt(pos) : null;\n      if (includeQuiet || captType) {\n        moves.push(new Move(startPos, pos, MoveTypes.NORMAL, pieceType, captType));\n      }\n    });\n  }\n\n  // adds available castling moves to the moves array\n  addCastleMoves(moves) {\n    const turnCastleRights = this.getCastleRights(this.turn);\n    const startPos = King.INIT_POS[this.turn];\n    const notOccupied = this.getOccupied().not();\n\n    if ((turnCastleRights & 0b1) && King.canCastle(this.turn, Dirs.WEST, notOccupied)) {\n      moves.push(new Move(startPos, startPos - 2, MoveTypes.CSTL_QUEEN, PieceTypes.KINGS));\n    }\n\n    if ((turnCastleRights & 0b10) && King.canCastle(this.turn, Dirs.EAST, notOccupied)) {\n      moves.push(new Move(startPos, startPos + 2, MoveTypes.CSTL_KING, PieceTypes.KINGS));\n    }\n  }\n\n  // returns 2bit value for the color's castling rights\n  // left bit => king-side rights\n  // right bit => queen-side rights\n  getCastleRights(color) {\n    return color === Colors.WHITE ? this.castleRights & 0b11 : this.castleRights >>> 2;\n  }\n\n  // returns a BB with occupied positions for a given color and piece type\n  getColorPieceSet(color, pieceType) {\n    return this.pieces[color].and(this.pieces[pieceType]);\n  }\n\n  // returns a BB of all occupied positions\n  getOccupied() {\n    return this.pieces[Colors.WHITE].or(this.pieces[Colors.BLACK]);\n  }\n\n  // returns a BB of all positions that this color does not occupy\n  getNotOccupiedBy(color) {\n    return this.pieces[color].not();\n  }\n\n  // returns the piece type that occupies the given position\n  // if no piece is found, returns null\n  getPieceAt(pos) {\n    const types = Object.values(PieceTypes);\n\n    let idx;\n    let type;\n\n    for (idx = 0; idx < types.length; idx++) {\n      type = types[idx];\n      if (this.pieces[type].hasSetBit(pos)) {\n        return type;\n      }\n    }\n\n    return null;\n  }\n\n  // makes a specified move if it's legal, updating the current position\n  // returns true if the move is made, false otherwise\n  makeMove(move) {\n    const moveData = move.getData();\n\n    let isLegal;\n    this.testMove(moveData, (testsLegal) => {\n      isLegal = testsLegal;\n      return !isLegal;\n    });\n\n    if (!isLegal) { return false; }\n\n    this.addPrevState();\n\n    this.adjustCastleRights(moveData.pieceType, moveData.from, moveData.captPieceType, moveData.to);\n    this.epBB = new BitBoard();\n\n    this.execMoveType(moveData.from, moveData.to, moveData.type);\n\n    this.prevMoves.push(move);\n    this.swapTurn();\n\n    return true;\n  }\n\n  // makes the piece movements needed to determine\n  // if the move is legal, sends a boolean for the legality\n  // to the callback and undoes the piece movements if the callback\n  // returns true\n  testMove(moveData, cb) {\n    if (moveData.captPieceType) {\n      this.clearPieceAt(moveData.to, this.opp, moveData.captPieceType);\n    }\n\n    if (moveData.isPromo) {\n      this.clearPieceAt(moveData.from, this.turn, PieceTypes.PAWNS);\n    } else {\n      this.movePiece(moveData.from, moveData.to, this.turn, moveData.pieceType);\n    }\n\n    const undo = cb(this.testsLegal(moveData));\n    if (!undo) { return; }\n\n    if (moveData.isPromo) {\n      this.setPieceAt(moveData.from, this.turn, PieceTypes.PAWNS);\n    } else {\n      this.movePiece(moveData.to, moveData.from, this.turn, moveData.pieceType);\n    }\n\n    if (moveData.captPieceType) {\n      this.setPieceAt(moveData.to, this.opp, moveData.captPieceType);\n    }\n  }\n\n  // returns boolean for whether or not move is legal\n  // based on the current position\n  testsLegal(moveData) {\n    if (moveData.isCastle) {\n      return this.isLegalCastle(moveData.from, moveData.type);\n    } else {\n      return !this.inCheck(this.turn);\n    }\n  }\n\n  isLegalCastle(pos, castleType) {\n    const dir = castleType === MoveTypes.CSTL_KING ? 1 : -1;\n    let count = 0;\n\n    while (count <= 2) {\n      if (this.isAttacked(pos, this.turn)) { return false; }\n      count++;\n      pos += dir;\n    }\n\n    return true;\n  }\n\n  // returns boolean for whether the provided color's king is in check\n  inCheck(color) {\n    const kingPos = this.getColorPieceSet(color, PieceTypes.KINGS).bitScanForward();\n    if (kingPos === null) { console.log('NO KING'); }\n    return this.isAttacked(kingPos, color);\n  }\n\n\n  // returns boolean for whether any opponent color piece is attacking the provided position\n  isAttacked(pos, color) {\n    const posBB = BitBoard.fromPos(pos);\n    const occupied = this.getOccupied();\n    const oppColor = this.getOtherColor(color);\n    const pawns = this.getColorPieceSet(oppColor, PieceTypes.PAWNS);\n\n    const queenBB = this.getColorPieceSet(oppColor, PieceTypes.QUEENS);\n    return (!Pawns.attacksLeft(oppColor, pawns, posBB).isZero() ||\n            !Pawns.attacksRight(oppColor, pawns, posBB).isZero() ||\n            !Knight.moves(pos, this.getColorPieceSet(oppColor, PieceTypes.KNIGHTS)).isZero() ||\n            !Bishop.moves(pos, occupied, this.getColorPieceSet(oppColor, PieceTypes.BISHOPS).or(queenBB)).isZero() ||\n            !Rook.moves(pos, occupied, this.getColorPieceSet(oppColor, PieceTypes.ROOKS).or(queenBB)).isZero());\n  }\n\n  // unmakes the previous move, updating the current position\n  unmakePrevMove() {\n    const prevMove = this.prevMoves.pop();\n    if (!prevMove) { return false; }\n    this.swapTurn();\n    const moveData = prevMove.getData();\n\n    this.reverseMoveType(moveData.from, moveData.to, moveData.type);\n\n    const prevState = this.prevStates.pop();\n    this.epBB = prevState.epBB;\n    this.castleRights = prevState.castleRights;\n\n    this.movePiece(moveData.to, moveData.from, this.turn, moveData.pieceType);\n\n    if (moveData.captPieceType) {\n      this.setPieceAt(moveData.to, this.opp, moveData.captPieceType);\n    }\n\n    return true;\n  }\n\n  // makes adjustments to the castling rights\n  // if a rook or king is moved\n  adjustCastleRights(pieceType, from, captPieceType, to) {\n    let clearCastlePos;\n    if (pieceType === PieceTypes.KINGS) {\n      let clearCastleRightsMask = this.turn === Colors.WHITE ? 0b1100 : 0b11;\n      this.castleRights &= clearCastleRightsMask;\n    } else if (pieceType === PieceTypes.ROOKS) {\n      clearCastlePos = 0;\n      if (from > King.INIT_POS[this.turn]) { clearCastlePos++; }\n      if (this.turn === Colors.BLACK) { clearCastlePos += 2; }\n      this.castleRights &= ~Math.pow(2, clearCastlePos);\n    }\n\n    if (captPieceType === PieceTypes.ROOKS) {\n      clearCastlePos = 0;\n      if (to > King.INIT_POS[this.opp]) { clearCastlePos++; }\n      if (this.opp === Colors.BLACK) { clearCastlePos += 2; }\n      this.castleRights &= ~Math.pow(2, clearCastlePos);\n    }\n  }\n\n  // adds the current state values to the prevStates array\n  // used for move unmaking purposes\n  addPrevState() {\n    const state = { epBB: this.epBB, castleRights: this.castleRights };\n    this.prevStates.push(state);\n  }\n\n  // makes special adjustments to the position based on the move type\n  execMoveType(from, to, type) {\n    switch(type) {\n      case MoveTypes.NORMAL:\n        return;\n      case MoveTypes.DBL_PPUSH:\n        let epPos = to + (-Pawns.DIRS[this.turn] * 8);\n        this.epBB = BitBoard.fromPos(epPos);\n        break;\n      case MoveTypes.CSTL_KING:\n        this.movePiece(from + 3, from + 1, this.turn, PieceTypes.ROOKS);\n        break;\n      case MoveTypes.CSTL_QUEEN:\n        this.movePiece(from - 4, from - 1, this.turn, PieceTypes.ROOKS);\n        break;\n      case MoveTypes.EP_CAPT:\n        let capturedPos = to - (Pawns.DIRS[this.turn] * 8);\n        this.clearPieceAt(capturedPos, this.opp, PieceTypes.PAWNS);\n        break;\n      case MoveTypes.NPROMO:\n        this.setPieceAt(to, this.turn, PieceTypes.KNIGHTS);\n        break;\n      case MoveTypes.BPROMO:\n        this.setPieceAt(to, this.turn, PieceTypes.BISHOPS);\n        break;\n      case MoveTypes.RPROMO:\n        this.setPieceAt(to, this.turn, PieceTypes.ROOKS);\n        break;\n      case MoveTypes.QPROMO:\n        this.setPieceAt(to, this.turn, PieceTypes.QUEENS);\n        break;\n    }\n  }\n\n  // unmakes special adjustments to the position based on the move type\n  reverseMoveType(from, to, type) {\n    switch(type) {\n      case MoveTypes.NORMAL:\n      case MoveTypes.DBL_PPUSH:\n        return;\n      case MoveTypes.CSTL_KING:\n        this.movePiece(from + 1, from + 3, this.turn, PieceTypes.ROOKS);\n        break;\n      case MoveTypes.CSTL_QUEEN:\n        this.movePiece(from - 1, from - 4, this.turn, PieceTypes.ROOKS);\n        break;\n      case MoveTypes.EP_CAPT:\n        let capturedPos = to - (Pawns.DIRS[this.turn] * 8);\n        this.setPieceAt(capturedPos, this.opp, PieceTypes.PAWNS);\n        break;\n      case MoveTypes.NPROMO:\n        this.clearPieceAt(to, this.turn, PieceTypes.KNIGHTS);\n        break;\n      case MoveTypes.BPROMO:\n        this.clearPieceAt(to, this.turn, PieceTypes.BISHOPS);\n        break;\n      case MoveTypes.RPROMO:\n        this.clearPieceAt(to, this.turn, PieceTypes.ROOKS);\n        break;\n      case MoveTypes.QPROMO:\n        this.clearPieceAt(to, this.turn, PieceTypes.QUEENS);\n        break;\n    }\n  }\n\n  // moves piece from one position to another\n  movePiece(from, to, color, pieceType) {\n    this.clearPieceAt(from, color, pieceType);\n    this.setPieceAt(to, color, pieceType);\n  }\n\n  // marks the given color and pieceType BBs as occupied at the specified position\n  setPieceAt(pos, color, pieceType) {\n    this.pieces[color].setBit(pos);\n    this.pieces[pieceType].setBit(pos);\n  }\n\n  // marks the given color and pieceType BBs as unoccupied at the specified position\n  clearPieceAt(pos, color, pieceType) {\n    this.pieces[color].clearBit(pos);\n    this.pieces[pieceType].clearBit(pos);\n  }\n\n  // renders BBs for all piece sets\n  renderPieceSets() {\n    Object.keys(this.pieces).forEach((boardType) => {\n      console.log(boardType);\n      this.pieces[boardType].render();\n    });\n  }\n\n  getBoardArr() {\n    return pieceSetsToArray(this.pieces);\n  }\n\n  // renders the board for the current position\n  renderBoardArr() {\n    const boardArr = pieceSetsToArray(this.pieces);\n\n    let pos;\n    let rowStr = '';\n    console.log(\"\\n\");\n    for (pos = 63; pos >= 0; pos--) {\n      rowStr = boardArr[pos] + rowStr;\n      if (pos % 8 === 0) {\n        console.log(rowStr);\n        rowStr = '';\n      }\n    }\n    console.log(\"\\n\");\n  }\n}\n\nmodule.exports = Position;\n\n\n\n// WEBPACK FOOTER //\n// ./js/position/index.js","function popCount32(int) {\n  let count = 0;\n\n  while (int) {\n    count++;\n    int &= (int - 1);\n  }\n\n  return count;\n}\n\nfunction bitScanForward32(int) {\n  return popCount32((int & -int) - 1);\n}\n\nfunction generateMSBTable(max) {\n  let res = [];\n  let int;\n  for (int = 1; int <= max; int++) {\n    res[int] = Math.floor(Math.log2(int));\n  }\n\n  return res;\n}\n\nconst mostSigBitTable = generateMSBTable(255);\n\nfunction bitScanReverse32(int) {\n  let res = 0;\n  if (int > 0xFFFF) {\n    int >>>= 16;\n    res += 16;\n  }\n\n  if (int > 0xFF) {\n    int >>>= 8;\n    res += 8;\n  }\n\n  return res + mostSigBitTable[int];\n}\n\nfunction clearLeastSigBit32(int) {\n  return (int & (int - 1));\n}\n\nmodule.exports = {\n  popCount32,\n  bitScanForward32,\n  bitScanReverse32,\n  clearLeastSigBit32\n};\n\n\n\n// WEBPACK FOOTER //\n// ./js/bitboard/utils.js","const BitBoard = require('./bitboard.js');\n\n// this file includes static sets of bitboards that\n// are commonly used throughout the program\n\nconst FULL_BOARD = new BitBoard().not();\n\nconst COLS = function() {\n  let colIdx = 0;\n  let cols = [];\n  while (colIdx < 8) {\n    cols.push(BitBoard.fromCol(colIdx));\n    colIdx++;\n  }\n\n  return cols;\n}();\n\n\nconst ROWS = function() {\n  let rowIdx = 0;\n  let rows = [];\n  while (rowIdx < 8) {\n    rows.push(BitBoard.fromRow(rowIdx));\n    rowIdx++;\n  }\n\n  return rows;\n}();\n\n\nconst DIAGS = function() {\n  const diags = [];\n  let pos = 56;\n\n  while (pos >= 0) {\n    diags.push(BitBoard.upperRightDiag(pos));\n    pos -= 8;\n  }\n\n  pos = 1;\n\n  while (pos < 8) {\n    diags.push(BitBoard.upperRightDiag(pos));\n    pos++;\n  }\n\n  return diags;\n}();\n\n\nconst ANTI_DIAGS = function() {\n  const antiDiags = [];\n  let pos = 0;\n\n  while (pos < 8) {\n    antiDiags.push(BitBoard.upperLeftDiag(pos));\n    pos++;\n  }\n\n  pos = 15;\n  while (pos < 64) {\n    antiDiags.push(BitBoard.upperLeftDiag(pos));\n    pos += 8;\n  }\n\n  return antiDiags;\n}();\n\nconst NORTH_OF_ROW = function() {\n  const res = [];\n  let bb = FULL_BOARD;\n  let idx = 0;\n\n  while (idx <= 7) {\n    bb = bb.xor(ROWS[idx]);\n    res.push(bb);\n    idx++;\n  }\n\n  return res;\n}();\n\nconst SOUTH_OF_ROW = function() {\n  const res = [];\n  let bb = new BitBoard();\n  let idx = 0;\n\n  while (idx <= 7) {\n    res.push(bb);\n    bb = bb.or(ROWS[idx]);\n    idx++;\n  }\n\n  return res;\n}();\n\nconst EAST_OF_COL = function() {\n  const res = [];\n  let bb = FULL_BOARD;\n  let idx = 0;\n\n  while (idx <= 7) {\n    bb = bb.xor(COLS[idx]);\n    res.push(bb);\n    idx++;\n  }\n\n  return res;\n}();\n\nconst WEST_OF_COL = function() {\n  const res = [];\n  let bb = new BitBoard();\n  let idx = 0;\n\n  while (idx <= 7) {\n    res.push(bb);\n    bb = bb.or(COLS[idx]);\n    idx++;\n  }\n\n  return res;\n}();\n\nmodule.exports = {\n  FULL_BOARD,\n  COLS,\n  ROWS,\n  DIAGS,\n  ANTI_DIAGS,\n  NORTH_OF_ROW,\n  SOUTH_OF_ROW,\n  EAST_OF_COL,\n  WEST_OF_COL\n};\n\n\n\n// WEBPACK FOOTER //\n// ./js/bitboard/masks.js","const { Types } = require('./constants.js');\n\nclass Move {\n  constructor(from, to, type, piece, captPiece) {\n    this.val = (((type & 0xf) << 18) >>> 0) |\n               ((((captPiece || 0) & 0x7) << 15) >>> 0) |\n               (((piece & 0x7) << 12) >>> 0) |\n               (((from & 0x3f) << 6) >>> 0) |\n               ((to & 0x3f) >>> 0) >>> 0;\n  }\n\n  // for testing purposes\n  static fromVal(val) {\n    const newMove = new Move(0, 0, 0, 0, 0);\n    newMove.val = val;\n    return newMove;\n  }\n\n  getData() {\n    return {\n      from: this.getFrom(),\n      to: this.getTo(),\n      type: this.getType(),\n      pieceType: this.getPiece(),\n      captPieceType: this.getCaptPiece(),\n      isPromo: this.isPromo(),\n      isCastle: this.isCastle()\n    };\n  }\n\n  getFrom() {\n    return (this.val >>> 6) & 0x3f;\n  }\n\n  getTo() {\n    return this.val & 0x3f;\n  }\n\n  getPiece() {\n    return (this.val >>> 12) & 0x7;\n  }\n\n  getCaptPiece() {\n    return (this.val >>> 15) & 0x7;\n  }\n\n  getType() {\n    return this.val >>> 18;\n  }\n\n  isPromo() {\n    return [Types.NPROMO, Types.BPROMO,\n            Types.RPROMO, Types.QPROMO].includes(this.getType());\n  }\n\n  isCastle() {\n    return [Types.CSTL_KING, Types.CSTL_QUEEN].includes(this.getType());\n  }\n}\n\nmodule.exports = { Move, MoveTypes: Types };\n\n\n\n// WEBPACK FOOTER //\n// ./js/move/index.js","// https://www.chessprogramming.org/Encoding_Moves#From-To_Based\n// require('../string_contants.js');\n\nconst typesArr = ['NORMAL', 'DBL_PPUSH',\n                  'CSTL_KING', 'CSTL_QUEEN',\n                  'EP_CAPT', 'NPROMO',\n                  'BPROMO','RPROMO', 'QPROMO'];\n\nconst Types = typesArr.reduce((res, type, idx) => {\n  res[type] = idx;\n  return res;\n}, {});\n\nmodule.exports = { Types };\n\n\n\n// WEBPACK FOOTER //\n// ./js/move/constants.js","const stepMove = require('./movements/step_move.js');\nconst { BBMasks } = require('../bitboard');\nconst { Colors } = require('./constants.js');\n\nconst DIRS = {\n  [Colors.WHITE]: 1,\n  [Colors.BLACK]: -1\n};\n\nconst INIT_MASKS = {\n  [Colors.WHITE]: BBMasks.ROWS[1],\n  [Colors.BLACK]: BBMasks.ROWS[6]\n};\n\nconst Pawns = {\n  value: 100,\n  positionValues: [\n\t\t0, 0, 0, 0, 0, 0, 0, 0,\n\t\t50, 50, 50, 50, 50, 50, 50, 50,\n\t\t10, 10, 20, 30, 30, 20, 10, 10,\n\t\t5, 5, 10, 25, 25, 10, 5, 5,\n\t\t0, 0, 0, 20, 20, 0, 0, 0,\n\t\t5, -5, -10, 0, 0, -10, -5, 5,\n\t\t5, 10, 10, -20, -20, 10, 10, 5,\n\t\t0, 0, 0, 0, 0, 0, 0, 0\n\t],\n  DIRS,\n  PROMO_MASKS: { [Colors.WHITE]: BBMasks.ROWS[7],\n                 [Colors.BLACK]: BBMasks.ROWS[0]\n               },\n  attacksLeft: (color, positions, oppPieces) => {\n    return stepMove(positions, DIRS[color], -DIRS[color]).and(oppPieces);\n  },\n  attacksRight: (color, positions, oppPieces) => {\n    return stepMove(positions, DIRS[color], DIRS[color]).and(oppPieces);\n  },\n  singlePush: (color, positions, notOccupied) => {\n    return stepMove(positions, DIRS[color], 0).and(notOccupied);\n  },\n  doublePush: (color, positions, notOccupied) => {\n    const onePush = stepMove(positions.and(INIT_MASKS[color]), DIRS[color], 0).and(notOccupied);\n    return stepMove(onePush, DIRS[color], 0).and(notOccupied);\n  }\n};\n\nmodule.exports = Pawns;\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/pawns.js","const { KNIGHT_MOVES } = require('./movements/masks.js');\n\nconst Knight = {\n  value: 325,\n  positionValues: [\n\t\t-50, -40, -30, -30, -30, -30, -40, -50,\n\t\t-40, -20, 0, 0, 0, 0, -20, -40,\n\t\t-30, 0, 10, 15, 15, 10, 0, -30,\n\t\t-30, 5, 15, 20, 20, 15, 5, -30,\n\t\t-30, 0, 15, 20, 20, 15, 0, -30,\n\t\t-30, 5, 10, 15, 15, 10, 5, -30,\n\t\t-40, -20, 0, 5, 5, 0, -20, -40,\n\t\t-50, -40, -30, -30, -30, -30, -40, -50\n\t],\n  moves: (position, notOwnPieces) => {\n    return KNIGHT_MOVES[position].and(notOwnPieces);\n  }\n};\n\nmodule.exports = Knight;\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/knight.js","const { diag } = require('./movements/slide_moves.js');\n\nconst Bishop = {\n  value: 325,\n  positionValues: [\n\t\t-20, -10, -10, -10, -10, -10, -10, -20,\n\t\t-10, 0, 0, 0, 0, 0, 0, -10,\n\t\t-10, 0, 5, 10, 10, 5, 0, -10,\n\t\t-10, 5, 5, 10, 10, 5, 5, -10,\n\t\t-10, 0, 10, 10, 10, 10, 0, -10,\n\t\t-10, 10, 10, 10, 10, 10, 10, -10,\n\t\t-10, 5, 0, 0, 0, 0, 5, -10,\n\t\t-20, -10, -10, -10, -10, -10, -10, -20\n\t],\n  moves: (position, occupied, notOwnPieces) => {\n    return diag(position, occupied, notOwnPieces);\n  }\n};\n\nmodule.exports = Bishop;\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/bishop.js","const { horizVert } = require('./movements/slide_moves.js');\n\nconst Rook = {\n  value: 500,\n  positionValues:\t[\n\t\t0, 0, 0, 0, 0, 0, 0, 0,\n\t\t5, 10, 10, 10, 10, 10, 10, 5,\n\t\t-5, 0, 0, 0, 0, 0, 0, -5,\n\t\t-5, 0, 0, 0, 0, 0, 0, -5,\n\t\t-5, 0, 0, 0, 0, 0, 0, -5,\n\t\t-5, 0, 0, 0, 0, 0, 0, -5,\n\t\t-5, 0, 0, 0, 0, 0, 0, -5,\n\t\t0, 0, 0, 5, 5, 0, 0, 0\n\t],\n  moves: (position, occupied, notOwnPieces) => {\n    return horizVert(position, occupied, notOwnPieces);\n  },\n};\n\nmodule.exports = Rook;\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/rook.js","const { diag, horizVert } = require('./movements/slide_moves.js');\n\nconst Queen = {\n  value: 1050,\n  positionValues: [\n\t\t-20, -10, -10, -5, -5, -10, -10, -20,\n\t\t-10, 0, 0, 0, 0, 0, 0, -10,\n\t\t-10, 0, 5, 5, 5, 5, 0, -10,\n\t\t-5, 0, 5, 5, 5, 5, 0, -5,\n\t\t0, 0, 5, 5, 5, 5, 0, -5,\n\t\t-10, 5, 5, 5, 5, 5, 0, -10,\n\t\t-10, 0, 5, 0, 0, 0, 0, -10,\n\t\t-20, -10, -10, -5, -5, -10, -10, -20\n\t],\n  moves: (position, occupied, notOwnPieces) => {\n    return diag(position, occupied, notOwnPieces).or(horizVert(position, occupied, notOwnPieces));\n  }\n};\n\nmodule.exports = Queen;\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/queen.js","const { BBMasks } = require('../bitboard');\nconst Dirs = require('./movements/dir_constants.js');\nconst { KING_MOVES, SLIDE_MOVES } = require('./movements/masks.js');\nconst { Colors } = require('./constants.js');\n\nconst INIT_POS = {\n  [Colors.BLACK]: 60,\n  [Colors.WHITE]: 4\n};\n\nconst King = {\n  value: 40000,\n  positionValues:\t[\n\t\t-30, -40, -40, -50, -50, -40, -40, -30,\n\t\t-30, -40, -40, -50, -50, -40, -40, -30,\n\t\t-30, -40, -40, -50, -50, -40, -40, -30,\n\t\t-30, -40, -40, -50, -50, -40, -40, -30,\n\t\t-20, -30, -30, -40, -40, -30, -30, -20,\n\t\t-10, -20, -20, -20, -20, -20, -20, -10,\n\t\t 20, 20, 0, 0, 0, 0, 20, 20,\n\t\t 20, 30, 10, 0, 0, 10, 30, 20\n\t],\n  INIT_POS,\n  moves: (position, notOwnPieces) => {\n    return KING_MOVES[position].and(notOwnPieces);\n  },\n  canCastle: (color, dir, notOccupied) => {\n    const castleSlide = SLIDE_MOVES[INIT_POS[color]][dir].and(notOccupied);\n    if (dir === Dirs.EAST) {\n      return castleSlide.popCount() === 2;\n    } else {\n      return castleSlide.popCount() === 3;\n    }\n  }\n};\n\nmodule.exports = King;\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/king.js","const { Types, Colors, PieceTypeLetters } = require('./constants.js');\n\nfunction pieceToLetter(type, color) {\n  if (color === Colors.WHITE) {\n    return PieceTypeLetters[type];\n  } else if (color === Colors.BLACK) {\n    return PieceTypeLetters[type].toUpperCase();\n  } else {\n    return '?';\n  }\n}\n\nfunction letterToColor(letter) {\n  return letter.toUpperCase() === letter ? Colors.BLACK : Colors.WHITE;\n}\n\nfunction letterToType(letter) {\n  const pieceTypes = Object.values(Types);\n  let pieceType;\n  let idx;\n\n  for (idx = 0; idx < pieceTypes.length; idx++) {\n    if (PieceTypeLetters[pieceTypes[idx]] === letter.toLowerCase()) {\n      pieceType = pieceTypes[idx];\n      break;\n    }\n  }\n\n  return pieceType;\n}\n\nmodule.exports = { pieceToLetter, letterToColor, letterToType };\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/conversions.js","const { PieceConv, PieceTypes, Colors } = require('../../pieces');\nconst { BitBoard } = require('../../bitboard');\n\nconst xx = \"_\";\n\nconst WP = PieceConv.pieceToLetter(PieceTypes.PAWNS, Colors.WHITE);\nconst WN = PieceConv.pieceToLetter(PieceTypes.KNIGHTS, Colors.WHITE);\nconst WB = PieceConv.pieceToLetter(PieceTypes.BISHOPS, Colors.WHITE);\nconst WR = PieceConv.pieceToLetter(PieceTypes.ROOKS, Colors.WHITE);\nconst WQ = PieceConv.pieceToLetter(PieceTypes.QUEENS, Colors.WHITE);\nconst WK = PieceConv.pieceToLetter(PieceTypes.KINGS, Colors.WHITE);\n\nconst BP = PieceConv.pieceToLetter(PieceTypes.PAWNS, Colors.BLACK);\nconst BN = PieceConv.pieceToLetter(PieceTypes.KNIGHTS, Colors.BLACK);\nconst BB = PieceConv.pieceToLetter(PieceTypes.BISHOPS, Colors.BLACK);\nconst BR = PieceConv.pieceToLetter(PieceTypes.ROOKS, Colors.BLACK);\nconst BQ = PieceConv.pieceToLetter(PieceTypes.QUEENS, Colors.BLACK);\nconst BK = PieceConv.pieceToLetter(PieceTypes.KINGS, Colors.BLACK);\n\nconst defaultBoardArr = [\nWR, WN, WB, WQ, WK, WB, WN, WR,\nWP, WP, WP, WP, WP, WP, WP, WP,\nxx, xx, xx, xx, xx, xx, xx, xx,\nxx, xx, xx, xx, xx, xx, xx, xx,\nxx, xx, xx, xx, xx, xx, xx, xx,\nxx, xx, xx, xx, xx, xx, xx, xx,\nBP, BP, BP, BP, BP, BP, BP, BP,\nBR, BN, BB, BQ, BK, BB, BN, BR\n];\n\nfunction createEmptyBoardArr() {\n  const res = [];\n\n  let count = 0;\n  while (count <= 64) {\n    res.push(xx);\n    count++;\n  }\n\n  return res;\n}\n\nfunction pieceSetsToArray(pieces) {\n  const res = createEmptyBoardArr();\n\n  const pieceTypes = Object.values(PieceTypes);\n  pieceTypes.forEach((type) => {\n    pieces[type].dup().pop1Bits((pos) => {\n      if (pieces[Colors.WHITE].hasSetBit(pos)) {\n        res[pos] = PieceConv.pieceToLetter(type, Colors.WHITE);\n      } else {\n        res[pos] = PieceConv.pieceToLetter(type, Colors.BLACK);\n      }\n    });\n  });\n\n  return res;\n}\n\nfunction pieceSetsFromArray(array = defaultBoardArr) {\n  const pieces = {};\n\n  Object.values(PieceTypes).forEach((type) => {\n    pieces[type] = new BitBoard();\n  });\n\n  Object.values(Colors).forEach((color) => {\n    pieces[color] = new BitBoard();\n  });\n\n\n  let pos;\n  let type;\n  let color;\n  for (pos = 0; pos < array.length; pos++) {\n    if (array[pos] !== xx) {\n      type = PieceConv.letterToType(array[pos]);\n      color = PieceConv.letterToColor(array[pos]);\n      pieces[type].setBit(pos);\n      pieces[color].setBit(pos);\n    }\n  }\n\n  return pieces;\n}\n\nmodule.exports = { pieceSetsToArray, pieceSetsFromArray };\n\n\n\n// WEBPACK FOOTER //\n// ./js/position/utils/array_conversions.js","const { Pawns, Knight, Bishop,\n        Rook, King, Queen,\n        PieceTypes, Colors, Dirs } = require('../pieces');\n\nclass AI {\n  constructor() {\n\n  }\n\n  // sumPawnScore(position, color, notOccupied, oppPositions) {\n  //   let sum = 0;\n  //\n  //   const pawnsPos = position.getColorPieceSet(color, PieceTypes.PAWNS);\n  //\n  //   pawnsPos.dup().pop1Bits((pos) => {\n  //     sum += Pawns.value;\n  //     sum += Pawns.positionValues[color ? (pos ^ 56) : pos];\n  //   });\n  //\n  //   sum += Pawns.singlePush(color, pawnsPos, notOccupied).popCount();\n  //   sum += Pawns.doublePush(color, pawnsPos, notOccupied).popCount();\n  //   sum += Pawns.attacksLeft(color, pawnsPos, oppPositions).popCount();\n  //   sum += Pawns.attacksRight(color, pawnsPos, oppPositions).popCount();\n  //\n  //   return sum;\n  // }\n  //\n  // sumSteppingPieceScore(position, color, pieceType, pieceConstant, notOwnPieces) {\n  //   let sum = 0;\n  //\n  //   const pieces = position.getColorPieceSet(color, pieceType);\n  //\n  //   pieces.dup().pop1Bits((pos) => {\n  //     sum += pieceConstant.value;\n  //     sum += pieceConstant.positionValues[color ? (pos ^ 56) : pos];\n  //     sum += pieceConstant.moves(pos, notOwnPieces).popCount();\n  //   });\n  //\n  //   return sum;\n  // }\n  //\n  // sumSlidingPieceScore(position, color, pieceType, pieceConstant, occupied, notOwnPieces) {\n  //   let sum = 0;\n  //\n  //   const pieces = position.getColorPieceSet(color, pieceType);\n  //\n  //   pieces.dup().pop1Bits((pos) => {\n  //     sum += pieceConstant.value;\n  //     sum += pieceConstant.positionValues[color ? (pos ^ 56) : pos];\n  //     sum += pieceConstant.moves(pos, occupied, notOwnPieces).popCount();\n  //   });\n  //\n  //   return sum;\n  // }\n  //\n  sumPieceSetScore(piecePositions, pieceConstant, color) {\n    let sum = 0;\n    piecePositions.dup().pop1Bits((pos) => {\n      sum += pieceConstant.value;\n      sum += pieceConstant.positionValues[color ? (pos ^ 56) : pos];\n    });\n\n    return sum;\n  }\n\n  sumPieceScore(pos, pieceConstant, color) {\n    let sum = 0;\n\n    if (pos !== null) {\n      sum += pieceConstant.value;\n      sum += pieceConstant.positionValues[color ? (pos ^ 56) : pos];\n    }\n\n    return sum;\n  }\n\n  evaluate(position) {\n    let sum = 0;\n\n    const turnPawns = position.getColorPieceSet(position.turn, PieceTypes.PAWNS);\n    sum += this.sumPieceSetScore(turnPawns, Pawns, position.turn);\n\n    const turnKnights = position.getColorPieceSet(position.turn, PieceTypes.KNIGHTS);\n    sum += this.sumPieceSetScore(turnKnights, Knight, position.turn);\n\n    const turnBishops = position.getColorPieceSet(position.turn, PieceTypes.BISHOPS);\n    sum += this.sumPieceSetScore(turnBishops, Bishop, position.turn);\n\n    const turnRooks = position.getColorPieceSet(position.turn, PieceTypes.ROOKS);\n    sum += this.sumPieceSetScore(turnRooks, Rook, position.turn);\n\n    const turnQueenPos = position.getColorPieceSet(position.turn, PieceTypes.QUEENS).bitScanForward();\n    sum += this.sumPieceScore(turnQueenPos, Queen, position.turn);\n\n    const turnKingPos = position.getColorPieceSet(position.turn, PieceTypes.KINGS).bitScanForward();\n    sum += this.sumPieceScore(turnKingPos, King, position.turn);\n\n    const oppPawns = position.getColorPieceSet(position.opp, PieceTypes.PAWNS);\n    sum -= this.sumPieceSetScore(oppPawns, Pawns, position.opp);\n\n    const oppKnights = position.getColorPieceSet(position.opp, PieceTypes.KNIGHTS);\n    sum -= this.sumPieceSetScore(oppKnights, Knight, position.opp);\n\n    const oppBishops = position.getColorPieceSet(position.opp, PieceTypes.BISHOPS);\n    sum -= this.sumPieceSetScore(oppBishops, Bishop, position.opp);\n\n    const oppRooks = position.getColorPieceSet(position.opp, PieceTypes.ROOKS);\n    sum -= this.sumPieceSetScore(oppRooks, Rook, position.opp);\n\n    const oppQueenPos = position.getColorPieceSet(position.opp, PieceTypes.QUEENS).bitScanForward();\n    sum -= this.sumPieceScore(oppQueenPos, Queen, position.turn);\n\n    const oppKingPos = position.getColorPieceSet(position.opp, PieceTypes.KINGS).bitScanForward();\n    sum -= this.sumPieceScore(oppKingPos, King, position.opp);\n\n    return sum;\n  }\n\n  // evaluate(position) {\n  //   let sum = 0;\n  //\n  //   const turnPieces = position.pieces[position.turn];\n  //   const oppPieces = position.pieces[position.opp];\n  //   const notTurnPieces = position.getNotOccupiedBy(position.turn);\n  //   const notOppPieces = position.getNotOccupiedBy(position.opp);\n  //   const occupied = position.getOccupied();\n  //   const notOccupied = occupied.not();\n  //\n  //   sum += this.sumPawnScore(position, position.turn, notOccupied, oppPieces);\n  //   sum -= this.sumPawnScore(position, position.opp, notOccupied, turnPieces);\n  //\n  //   sum += this.sumSteppingPieceScore(position, position.turn, PieceTypes.KNIGHTS, Knight, notTurnPieces);\n  //   sum -= this.sumSteppingPieceScore(position, position.opp, PieceTypes.KNIGHTS, Knight, notOppPieces);\n  //\n  //   sum += this.sumSlidingPieceScore(position, position.turn, PieceTypes.BISHOPS, Bishop, occupied, notTurnPieces);\n  //   sum -= this.sumSlidingPieceScore(position, position.opp, PieceTypes.BISHOPS, Bishop, occupied, notOppPieces);\n  //\n  //   sum += this.sumSlidingPieceScore(position, position.turn, PieceTypes.ROOKS, Rook, occupied, notTurnPieces);\n  //   sum -= this.sumSlidingPieceScore(position, position.opp, PieceTypes.ROOKS, Rook, occupied, notOppPieces);\n  //\n  //   sum += this.sumSlidingPieceScore(position, position.turn, PieceTypes.QUEENS, Queen, occupied, notTurnPieces);\n  //   sum -= this.sumSlidingPieceScore(position, position.opp, PieceTypes.QUEENS, Queen, occupied, notOppPieces);\n  //\n  //   sum += this.sumSteppingPieceScore(position, position.turn, PieceTypes.KINGS, King, notTurnPieces);\n  //   sum -= this.sumSteppingPieceScore(position, position.opp, PieceTypes.KINGS, King, notOppPieces);\n  //\n  //   return sum;\n  // }\n\n  makeMove(position) {\n    // const moves = position.generateLegalMoves();\n    // const move = moves[Math.floor(Math.random() * moves.length)];\n    // position.makeMove(move);\n    this.maxDepth = 4;\n    this.negaMax(position, this.maxDepth, -Infinity, Infinity);\n    position.makeMove(this.bestMove);\n  }\n\n  quiescenceSearch(position, alpha, beta) {\n    const standPatVal = this.evaluate(position);\n\n    if (standPatVal >= beta) {\n      return beta;\n    } else if (alpha < standPatVal) {\n      alpha = standPatVal;\n    }\n\n    let inCheck = position.inCheck(position.turn);\n    const moves = position.generatePseudoMoves(inCheck);\n    this.sortMoves(moves);\n    let moveIdx;\n    let score;\n\n    // if (inCheck) { position.renderBoardArr(); }\n    for (moveIdx = 0; moveIdx < moves.length; moveIdx++) {\n      if (position.makeMove(moves[moveIdx])) {\n        score = -this.quiescenceSearch(position, -beta, -alpha);\n        position.unmakePrevMove();\n\n        if (score >= beta) { return beta; }\n        if (score > alpha) { alpha = score; }\n      }\n    }\n\n    return alpha;\n  }\n\n  negaMax(position, depth, alpha, beta) {\n    if (depth === 0) {\n      // return this.evaluate(position);\n      return this.quiescenceSearch(position, alpha, beta);\n    }\n\n    const moves = position.generatePseudoMoves();\n    this.sortMoves(moves);\n    let moveIdx;\n    let canMove = false;\n    let score;\n    let bestScore = -Infinity;\n\n    for (moveIdx = 0; moveIdx < moves.length; moveIdx++) {\n      if (position.makeMove(moves[moveIdx])) {\n        canMove = true;\n        score = -this.negaMax(position, depth - 1, -beta, -alpha);\n        position.unmakePrevMove();\n        if (score > bestScore) {\n          bestScore = score;\n          if (bestScore > alpha) { alpha = bestScore; }\n          if (depth === this.maxDepth) { this.bestMove = moves[moveIdx]; }\n        }\n        if (alpha >= beta) { break; }\n      }\n    }\n\n    if (!canMove) {\n      if (position.inCheck(position.turn)) {\n        return -King.value;\n      } else {\n        return 0;\n      }\n    } else {\n      return bestScore;\n    }\n  }\n\n  sortMoves(moves) {\n    function calculateScore(move) {\n      let score = move.getCaptPiece();\n      score = score * 10 + move.getPiece();\n      score = score * 10 + move.getType();\n    }\n\n    moves.sort((moveA, moveB) => {\n      return calculateScore(moveA) > calculateScore(moveB) ? -1 : 1;\n    });\n  }\n}\n\nmodule.exports = AI;\n\n\n\n// WEBPACK FOOTER //\n// ./js/ai/index.js","const { ColsFiles, FilesCols,\n        RowsRanks, RanksRows} = require('./constants.js');\n\nfunction posFromFileRank(fileRank) {\n  const [file, rank] = fileRank.split('');\n  return (RanksRows[rank] * 8) + FilesCols[file];\n}\n\nfunction fileRankFromPos(pos) {\n  return ColsFiles[pos % 8] + (RowsRanks[Math.floor(pos / 8)]);\n}\n\n// if the row and col are either both even or both odd\nfunction isDarkSquare(fileRank) {\n  const [file, rank] = fileRank.split('');\n  const row = RanksRows[rank];\n  const col = FilesCols[file];\n  return (row % 2 === 0 && col % 2 === 0) ||\n         (row % 2 === 1 && col % 2 === 1);\n}\n\nmodule.exports = {\n  posFromFileRank,\n  fileRankFromPos,\n  isDarkSquare\n};\n\n\n\n// WEBPACK FOOTER //\n// ./js/ui/util.js"],"sourceRoot":""}