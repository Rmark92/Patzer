{"version":3,"sources":["webpack:///webpack/bootstrap 0df01e0020c5fe571f21","webpack:///./js/bitboard/index.js","webpack:///./js/pieces/index.js","webpack:///./js/pieces/constants.js","webpack:///./js/pieces/movements/dir_constants.js","webpack:///./js/pieces/movements/masks.js","webpack:///./js/pieces/movements/slide_moves.js","webpack:///./js/bitboard/bitboard.js","webpack:///./js/move/index.js","webpack:///./js/pieces/movements/step_move.js","webpack:///./js/ui/constants.js","webpack:///./js/app.js","webpack:///./js/ui/index.js","webpack:///./js/position/index.js","webpack:///./js/bitboard/masks.js","webpack:///./js/move/constants.js","webpack:///./js/pieces/pawns.js","webpack:///./js/pieces/knight.js","webpack:///./js/pieces/bishop.js","webpack:///./js/pieces/rook.js","webpack:///./js/pieces/queen.js","webpack:///./js/pieces/king.js","webpack:///./js/pieces/conversions.js","webpack:///./js/pieces/each_piece_type.js","webpack:///./js/position/zhash_constants.js","webpack:///./js/ai/index.js","webpack:///./js/ai/move_search.js","webpack:///./js/ai/transpos_table.js","webpack:///./js/ai/killer_move_list.js","webpack:///./js/ai/perf_monitor.js","webpack:///./js/ui/util.js","webpack:///./js/bitboard/int32Utils.js"],"names":["BitBoard","require","Masks","module","exports","BBMasks","Constants","Pawns","Knight","Bishop","Rook","Queen","King","PieceConv","eachPieceType","Dirs","PUtils","Types","PAWNS","KNIGHTS","BISHOPS","ROOKS","QUEENS","KINGS","PTypes","Colors","PieceTypeHTML","WHITE","BLACK","PieceTypeLetters","DIRS","stepMove","generateStepBitBoards","dirs","res","pos","initial","posRes","addMove","currRes","dir","or","fromPos","reduce","push","KNIGHT_MOVES","KING_MOVES","SLIDE_MOVES","moves","colIdx","rowIdx","diagIdx","antiDiagIdx","Math","floor","NORTH","COLS","and","NORTH_OF_ROW","SOUTH","SOUTH_OF_ROW","EAST","ROWS","EAST_OF_COL","WEST","WEST_OF_COL","NOEA","DIAGS","SOWE","NOWE","ANTI_DIAGS","SOEA","isPosRay","findUnblocked","occupied","dirBB","blocking","blockingPos","isZero","bitScanForward","bitScanReverse","xor","horizVert","notOwnPieces","diag","Int32Utils","low","high","other","numBits","newLowBits","newHighBits","count","int32","popCount32","bitScanForward32","Boolean","bitScanReverse32","cb","clearLeastSigBit32","row","pow","posVal","console","log","length","setBit","positions","forEach","colNum","rowNum","posMax","startPos","Move","from","to","type","piece","captPiece","val","getFrom","getTo","getType","pieceType","getPiece","captPieceType","getCaptPiece","isPromo","isCastle","NPROMO","BPROMO","RPROMO","QPROMO","includes","CSTL_KING","CSTL_QUEEN","newMove","MoveTypes","noSo","eaWe","shiftLeft","shiftRight","ColsFiles","FilesCols","file","col","RowsRanks","RanksRows","rank","GameStatus","ThreeFoldRep","MoveLimitExc","Checkmate","Stalemate","PlayerTurn","AITurn","Selectors","BOARD_ID","PIECE_CLASS","SQUARE_CLASS","RANK_CLASS","FILE_CLASS","UI","$","document","ready","ui","run","Position","AI","Util","ai","setupButtons","reset","empty","text","position","playerColor","parseInt","aiThinkingTime","parseFloat","setThinkingTime","drawBoard","playNextTurn","click","event","currentTarget","hasClass","unmakePlayerMove","aiMove","slider","value","thinkingTime","min","round","max","step","slide","E","formatTime","removeClass","addClass","prevMoves","currMoves","generateLegalMoves","isThreefoldRepetition","status","isMoveLimitExceeded","inCheck","turn","activateBtns","statusEl","unmakePrevMove","shiftFromMovesList","updatePieces","setupPlayerMove","moveStr","moveStats","depth","runTime","exploredPositions","mainSearchNodes","qSearchNodes","tTableHits","moveData","moveItem","formatMove","move","color","append","stats","populateStatsTable","movesHistory","newMoveItem","createMoveItem","prepend","remove","newRow","fileRank","newSquare","squareColor","isDarkSquare","board","newRankRow","rowsRanks","slice","reverse","generateSquare","generateFileHeader","pieceTypes","Object","values","pieces","newPiece","dup","pop1Bits","hasSetBit","fileRankFromPos","addToMovesList","makeMove","deactivateBtns","resetStatus","isGameOver","setTimeout","aiMoveData","chooseMove","animateMove","performance","pieceEl","captOffset","offset","css","left","top","fadeOut","oldOffset","appendTo","newOffset","animPiece","clone","hide","animate","show","movesData","map","getData","moveFromTos","moveToFroms","activateDraggablePieces","activateDroppableSquares","fromFileRank","keys","draggable","containment","revert","revertDuration","mouseenter","toPos","mouseleave","destSq","originSquare","originPos","selectedMove","droppable","accept","parent","attr","posFromFileRank","drop","makePlayerMove","children","selectedMoves","filter","createPromoWindow","promoMoves","promoDiv","promoPieces","createPromoPieces","promoWinRow","PromosPTypes","newPromoPiece","promoMove","createPromoPiece","pType","promoPiece","piecePosHashKeys","epPosHashKeys","castleHashKeys","turnHashKeys","defaultFenStr","fenStr","split","turnLetter","castleRightsStr","epSq","halfMoveClock","fullMoveClock","fenPositionsToPieceBBs","castleRights","parseCastleRightsStr","epBB","parseEpStr","prevStates","pTypesLocations","createPTypesLocations","pPosHash","createPiecesPosHash","stateHash","createStateHash","setTurn","getOtherColor","positionCounts","addPositionCount","rowStrs","pieceBBs","createEmptyPiecesBBs","rowStr","char","test","letterToType","letterToColor","rightsPos","rightsLetter","epStr","getPieceAt","whitesPos","blacksPos","castleRightsPos","opp","includeQuiet","checkNSDraw","isNonStalemateDraw","addPawnMoves","addNormalMoves","addKingMoves","pseudoMoves","generatePseudoMoves","isLegal","legals","pseudoMove","testMove","testsLegal","pawnsPos","getColorPieceSet","notOccupied","getOccupied","not","pawnSinglePushes","singlePush","addPawnMoveSet","pawnDoublePushes","doublePush","oppPositions","pawnLeftAttacks","attacksLeft","pawnRightAttacks","attacksRight","newPositions","shiftAmt","isCapture","isDblPush","captured","DBL_PPUSH","EP_CAPT","PROMO_MASKS","addPromos","NORMAL","promoType","getNotOccupiedBy","knightsPos","knightMoves","addNormalMoveSet","bishopsPos","bishopMoves","rooksPos","rookMoves","queensPos","queenMoves","kingPos","normalMoves","addCastleMoves","newPos","captType","turnCastleRights","getCastleRights","INIT_POS","canCastle","types","idx","setNewState","execMoveType","swapTurn","clearPieceAt","movePiece","undo","setPieceAt","isLegalCastle","castleType","isAttacked","posBB","oppColor","pawns","queenBB","addPrevState","adjustCastleRights","setNewEpState","updateClock","state","clearCastleRights","clearRightsPos","clearRightsMask","epPos","capturedPos","currHash","getHash","prevMove","pop","subtractPositionCount","reverseMoveType","restorePrevState","prevState","clearBit","FULL_BOARD","cols","fromCol","rows","fromRow","diags","upperRightDiag","antiDiags","upperLeftDiag","bb","typesArr","INIT_MASKS","positionValues","oppPieces","onePush","castleSlide","popCount","pieceToLetter","toUpperCase","letter","toLowerCase","randSigned32Bit","positive","random","newPosKeys","addPTypeKeys","rightsIdx","MoveSearch","prevPerformance","availableMoves","moveSearch","bestMove","findBest","perfResults","getPerformance","TransposTable","TABLE_SCORE_TYPES","KillerMoveList","PerfMonitor","EARLY_EXIT","initAvailable","transPosTable","killerMoveList","perfMonitor","setStartTime","endTime","Date","now","maxDepth","addSlot","negaMax","Infinity","setDepth","setEndTime","printResults","currNodeEntry","getEntry","getResults","alpha","beta","logQuiescentNode","standPatVal","evaluate","calculateMoveOrderScore","score","sortMoves","moveIdx","quiescenceSearch","prevAlpha","entry","logTableHit","EXACT","LOWERBOUND","UPPERBOUND","logMainSearchNode","prevBestMove","siblingKillerMoves","getSiblingMoves","canMove","result","bestScore","storeEntry","calculateScore","createMoveScores","sort","moveA","moveB","moveScore","materialScore","scoreMaterial","piecePositionScore","scorePiecePositions","piecePositions","SCORE_TYPES","table","key","determineScoreType","list","maxPerLevel","Array","distFromRoot","tableHits","startTime","parseMoveStats","join","millisecs","timeStr","toString","indexOf","generateMSBTable","int","log2","mostSigBitTable"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0df01e0020c5fe571f21","const BitBoard = require('./bitboard.js');\nconst Masks = require('./masks.js');\n\nmodule.exports = {\n  BitBoard,\n  BBMasks: Masks,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./js/bitboard/index.js","// const { WhitePawns, BlackPawns } = require('./pawns.js');\nconst Constants = require('./constants.js');\nconst Pawns = require('./pawns.js');\nconst Knight = require('./knight.js');\nconst Bishop = require('./bishop.js');\nconst Rook = require('./rook.js');\nconst Queen = require('./queen.js');\nconst King = require('./king.js');\nconst PieceConv = require('./conversions.js');\nconst eachPieceType = require('./each_piece_type.js');\nconst Dirs = require('./movements/dir_constants.js');\n\nconst PUtils = {\n  [Constants.Types.PAWNS]: Pawns,\n  [Constants.Types.KNIGHTS]: Knight,\n  [Constants.Types.BISHOPS]: Bishop,\n  [Constants.Types.ROOKS]: Rook,\n  [Constants.Types.QUEENS]: Queen,\n  [Constants.Types.KINGS]: King\n};\n\nmodule.exports = {\n  PTypes: Constants.Types,\n  Colors: Constants.Colors,\n  PieceTypeHTML: Constants.PieceTypeHTML,\n  PUtils,\n  eachPieceType,\n  Dirs,\n  PieceConv\n};\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/index.js","const Colors = {\n  WHITE: 0,\n  BLACK: 1\n};\n\nconst Types = {\n  PAWNS: 2,\n  KNIGHTS: 3,\n  BISHOPS: 4,\n  ROOKS: 5,\n  QUEENS: 6,\n  KINGS: 7\n};\n\nconst PieceTypeLetters = {\n  [Types.PAWNS]: 'p',\n  [Types.KNIGHTS]: 'n',\n  [Types.BISHOPS]: 'b',\n  [Types.ROOKS]: 'r',\n  [Types.QUEENS]: 'q',\n  [Types.KINGS]: 'k',\n};\n\nconst PieceTypeHTML = {\n  [Types.PAWNS]: '&#9823;',\n  [Types.KNIGHTS]: '&#9822;',\n  [Types.BISHOPS]: '&#9821;',\n  [Types.ROOKS]: '&#9820;',\n  [Types.QUEENS]: '&#9819;',\n  [Types.KINGS]: '&#9818;',\n};\n\nmodule.exports = { Types, Colors, PieceTypeLetters, PieceTypeHTML };\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/constants.js","const DIRS = {\n  'NORTH': 0,\n  'SOUTH': 1,\n  'EAST': 2,\n  'WEST': 3,\n  'NOEA': 4,\n  'NOWE': 5,\n  'SOEA': 6,\n  'SOWE': 7\n};\n\nmodule.exports = DIRS;\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/movements/dir_constants.js","const { BitBoard, BBMasks } = require('../../bitboard');\nconst Dirs = require('./dir_constants.js');\nconst stepMove = require('./step_move.js');\n\nfunction generateStepBitBoards(dirs) {\n  const res = [];\n  let pos = 0;\n  let initial;\n  let posRes;\n\n  const addMove = (currRes, dir) => {\n    return currRes.or(stepMove(initial, dir[0], dir[1]));\n  };\n\n  while (pos < 64) {\n    initial = BitBoard.fromPos(pos);\n    posRes = dirs.reduce((currRes, dir) => addMove(currRes, dir), new BitBoard());\n    res.push(posRes);\n    pos++;\n  }\n\n  return res;\n}\n\nconst KNIGHT_MOVES = function() {\n  const dirs = [[1, 2], [1, -2],\n                [2, 1], [2, -1],\n                [-1, 2], [-1, -2],\n                [-2, 1], [-2, -1]];\n\n  return generateStepBitBoards(dirs);\n}();\n\nconst KING_MOVES = function() {\n  const dirs = [[1, 0], [1, 1],\n                [1, -1],[-1, 0],\n                [-1, 1], [-1, -1],\n                [0, -1], [0, 1]];\n\n  return generateStepBitBoards(dirs);\n}();\n\nconst SLIDE_MOVES = function() {\n  let pos = 0;\n  const res = [];\n  let moves;\n  let colIdx;\n  let rowIdx;\n  let diagIdx;\n  let antiDiagIdx;\n\n  while (pos < 64) {\n    moves = {};\n    rowIdx = Math.floor(pos / 8);\n    colIdx = pos % 8;\n    diagIdx = (pos < rowIdx * 9) ? (pos % 9) - 2 : (pos % 9) + 7;\n    if (pos === 63) {\n      antiDiagIdx = 14;\n    } else {\n      antiDiagIdx = (pos < (rowIdx + 1) * 7) ? (pos % 7) : (pos % 7) + 7;\n    }\n    moves[Dirs.NORTH] = BBMasks.COLS[colIdx].and(BBMasks.NORTH_OF_ROW[rowIdx]);\n    moves[Dirs.SOUTH] = BBMasks.COLS[colIdx].and(BBMasks.SOUTH_OF_ROW[rowIdx]);\n    moves[Dirs.EAST] = BBMasks.ROWS[rowIdx].and(BBMasks.EAST_OF_COL[colIdx]);\n    moves[Dirs.WEST] = BBMasks.ROWS[rowIdx].and(BBMasks.WEST_OF_COL[colIdx]);\n    moves[Dirs.NOEA] = BBMasks.DIAGS[diagIdx].and(BBMasks.NORTH_OF_ROW[rowIdx]);\n    moves[Dirs.SOWE] = BBMasks.DIAGS[diagIdx].and(BBMasks.SOUTH_OF_ROW[rowIdx]);\n    moves[Dirs.NOWE] = BBMasks.ANTI_DIAGS[antiDiagIdx].and(BBMasks.NORTH_OF_ROW[rowIdx]);\n    moves[Dirs.SOEA] = BBMasks.ANTI_DIAGS[antiDiagIdx].and(BBMasks.SOUTH_OF_ROW[rowIdx]);\n    res.push(moves);\n    pos++;\n  }\n\n  return res;\n}();\n\nmodule.exports = {\n  KNIGHT_MOVES,\n  KING_MOVES,\n  SLIDE_MOVES,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/movements/masks.js","const { BitBoard, BBMasks } = require('../../bitboard');\nconst { SLIDE_MOVES } = require('./masks.js');\nconst Dirs = require('./dir_constants.js');\n\nconst isPosRay = {\n  [Dirs.NORTH]: true,\n  [Dirs.EAST]: true,\n  [Dirs.NOEA]: true,\n  [Dirs.NOWE]: true,\n  [Dirs.SOUTH]: false,\n  [Dirs.WEST]: false,\n  [Dirs.SOEA]: false,\n  [Dirs.SOWE]: false\n};\n\nfunction findUnblocked(pos, occupied, dir) {\n  const dirBB = SLIDE_MOVES[pos][dir];\n  const blocking = dirBB.and(occupied);\n  let blockingPos;\n\n  if (blocking.isZero()) {\n    return dirBB;\n  } else {\n    blockingPos = isPosRay[dir] ? blocking.bitScanForward() : blocking.bitScanReverse();\n    return dirBB.xor(SLIDE_MOVES[blockingPos][dir]);\n  }\n}\n\nfunction horizVert(pos, occupied, notOwnPieces) {\n  return [Dirs.NORTH, Dirs.SOUTH, Dirs.EAST, Dirs.WEST].reduce((res, dir) => {\n    return res.or(findUnblocked(pos, occupied, dir));\n  }, new BitBoard()).and(notOwnPieces);\n}\n\nfunction diag(pos, occupied, notOwnPieces) {\n  return [Dirs.NOEA, Dirs.NOWE, Dirs.SOEA, Dirs.SOWE].reduce((res, dir) => {\n    return res.or(findUnblocked(pos, occupied, dir));\n  }, new BitBoard()).and(notOwnPieces);\n}\n\nmodule.exports = {\n  horizVert,\n  diag\n};\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/movements/slide_moves.js","const Int32Utils = require('./int32Utils.js');\n// A standard 8x8 chess board can be represented by a 64bit integer (bitboard),\n// in which a 1 means the position is occupied, a 0 means it's empty\n\n// We use several of these bitboards to represent a chess position\n// for example, the current set of pieces is represented by a bitboard\n// for each piece type and color\n\n// Since Javascript doesn't support bitwise operations for 64bit integers,\n// we implement most of those operations here, separating the 64bit int\n// into its low 32bit and high 32bit components\n\n//56 57 58 59 60 61 62 63\n//48 49 50 51 52 53 54 55  ^\n//40 41 42 43 44 45 46 47  |\n//32 33 34 35 36 37 38 39 HIGH\n//24 25 26 27 28 29 30 31 LOW\n//16 17 18 19 20 21 22 23  |\n// 8  9 10 11 12 13 14 15  v\n// 0  1  2  3  4  5  6  7\n\nclass BitBoard {\n  constructor(low, high) {\n    this.low = (low || 0) >>> 0;\n    this.high = (high || 0) >>> 0;\n  }\n\n  and(other) {\n    return new BitBoard(this.low & other.low, this.high & other.high);\n  }\n\n  or(other) {\n    return new BitBoard(this.low | other.low, this.high | other.high);\n  }\n\n  xor(other) {\n    return new BitBoard(this.low ^ other.low, this.high ^ other.high);\n  }\n\n  not() {\n    return new BitBoard(~this.low, ~this.high);\n  }\n\n  equals(other) {\n    return (this.low === other.low && this.high === other.high);\n  }\n\n  greaterThan(other) {\n    return (this.high > other.high || this.low > other.low);\n  }\n\n  lessThan(other) {\n    return (this.high < other.high || this.low < other.low);\n  }\n\n  isZero() {\n    return (this.high === 0 && this.low === 0);\n  }\n\n  shiftRight(numBits) {\n    let newLowBits, newHighBits;\n\n    if (numBits <= 0) {\n      return new BitBoard(this.low, this.high);\n    } else if (numBits > 63) {\n      return new BitBoard();\n    } else if (numBits >= 32) {\n      newLowBits = this.high >>> (numBits - 32);\n      newHighBits = 0;\n    } else {\n      newLowBits = (this.low >>> numBits) | (this.high << (32 - numBits));\n      newHighBits = this.high >>> numBits;\n    }\n\n    return new BitBoard(newLowBits, newHighBits);\n  }\n\n  shiftLeft(numBits) {\n    let newLowBits, newHighBits;\n\n    if (numBits <= 0) {\n      return new BitBoard(this.low, this.high);\n    } else if (numBits > 63) {\n      return new BitBoard();\n    } else if (numBits >= 32) {\n      newLowBits = 0;\n      newHighBits = (this.low << (numBits - 32)) >>> 0;\n    } else {\n      newLowBits = (this.low << numBits) >>> 0;\n      newHighBits =  ((this.low >>> (32 - numBits)) | (this.high << numBits)) >>> 0;\n    }\n\n    return new BitBoard(newLowBits, newHighBits);\n  }\n\n  popCount() {\n      return [this.low, this.high].reduce((count, int32) => {\n        return count + Int32Utils.popCount32(int32);\n      }, 0);\n  }\n\n  setBit(pos) {\n    if (pos >= 32 && pos < 64) {\n      this.high = (this.high | (1 << (pos - 32))) >>> 0;\n    } else if (pos >= 0 && pos < 32) {\n      this.low = (this.low | (1 << pos)) >>> 0;\n    }\n  }\n\n  clearBit(pos) {\n    if (pos >= 32) {\n      this.high = (this.high & ~(1 << (pos - 32))) >>> 0;\n    } else {\n      this.low = (this.low & ~(1 << pos)) >>> 0;\n    }\n  }\n\n  bitScanForward() {\n    if (this.low) {\n      return Int32Utils.bitScanForward32(this.low);\n    } else if (this.high) {\n      return Int32Utils.bitScanForward32(this.high) + 32;\n    } else {\n      return null;\n    }\n  }\n\n  hasSetBit(pos) {\n    if (pos < 32) {\n      return Boolean(this.low & (1 << pos));\n    } else {\n      return Boolean(this.high & (1 << (pos - 32)));\n    }\n  }\n\n  bitScanReverse() {\n    if (this.high) {\n      return Int32Utils.bitScanReverse32(this.high) + 32;\n    } else if (this.low) {\n      return Int32Utils.bitScanReverse32(this.low);\n    } else {\n      return null;\n    }\n  }\n\n  pop1Bits(cb) {\n    while (this.low) {\n      cb(Int32Utils.bitScanForward32(this.low));\n      this.low = Int32Utils.clearLeastSigBit32(this.low);\n    }\n\n    while (this.high) {\n      cb(Int32Utils.bitScanForward32(this.high) + 32);\n      this.high = Int32Utils.clearLeastSigBit32(this.high);\n    }\n  }\n\n  dup() {\n    return new BitBoard(this.low, this.high);\n  }\n\n  static fromPos(pos) {\n    const res = new BitBoard();\n    res.setBit(pos);\n\n    return res;\n  }\n\n  static fromPositions(positions) {\n    const res = new BitBoard();\n\n    positions.forEach((pos) => {\n      res.setBit(pos);\n    });\n\n    return res;\n  }\n\n  static fromCol(colNum) {\n    const res = new BitBoard();\n    if (colNum < 0 || colNum > 7) { return res; }\n    let pos = colNum;\n\n    while (pos < 64) {\n      res.setBit(pos);\n      pos += 8;\n    }\n\n    return res;\n  }\n\n  static fromRow(rowNum) {\n    const res = new BitBoard();\n    if (rowNum < 0 || rowNum > 7) { return res; }\n\n    let pos = rowNum * 8;\n    let posMax = pos + 7;\n\n    while (pos <= posMax) {\n      res.setBit(pos);\n      pos++;\n    }\n\n    return res;\n  }\n\n  static upperRightDiag(startPos) {\n    const res = BitBoard.fromPos(startPos);\n    if (startPos < 0 || startPos > 63) { return res; }\n    let pos = startPos + 9;\n\n    while (pos < 64 && pos % 8 !== 0) {\n      res.setBit(pos);\n      pos += 9;\n    }\n\n    return res;\n  }\n\n  static upperLeftDiag(startPos) {\n    const res = new BitBoard();\n    if (startPos < 0 || startPos > 63) { return res; }\n    let pos = startPos;\n\n    while (pos < 64 && pos % 8 !== 0) {\n      res.setBit(pos);\n      pos += 7;\n    }\n\n    if (pos < 64) {\n      res.setBit(pos);\n    }\n\n    return res;\n  }\n\n  render() {\n    let row = '';\n    let pow = 63;\n    let posVal;\n    console.log('------');\n    while (pow >= 32) {\n      posVal = (Math.pow(2, pow - 32) & this.high) === 0 ? '0' : '1';\n      row = posVal + row;\n      if (row.length === 8) {\n        console.log(row);\n        row = '';\n      }\n      pow--;\n    }\n\n    while (pow >= 0) {\n      posVal = (Math.pow(2, pow) & this.low) === 0 ? '0' : '1';\n      row = posVal + row;\n      if (row.length === 8) {\n        console.log(row);\n        row = '';\n      }\n      pow--;\n    }\n    console.log('------');\n  }\n}\n\n\nmodule.exports = BitBoard;\n\n\n\n// WEBPACK FOOTER //\n// ./js/bitboard/bitboard.js","const { Types } = require('./constants.js');\n\nclass Move {\n  constructor(from, to, type, piece, captPiece) {\n    this.val = (((type & 0xf) << 18) >>> 0) |\n               ((((captPiece || 0) & 0x7) << 15) >>> 0) |\n               (((piece & 0x7) << 12) >>> 0) |\n               (((from & 0x3f) << 6) >>> 0) |\n               ((to & 0x3f) >>> 0) >>> 0;\n  }\n\n  // for testing purposes\n  static fromVal(val) {\n    const newMove = new Move(0, 0, 0, 0, 0);\n    newMove.val = val;\n    return newMove;\n  }\n\n  getData() {\n    return {\n      from: this.getFrom(),\n      to: this.getTo(),\n      type: this.getType(),\n      pieceType: this.getPiece(),\n      captPieceType: this.getCaptPiece(),\n      isPromo: this.isPromo(),\n      isCastle: this.isCastle()\n    };\n  }\n\n  getFrom() {\n    return (this.val >>> 6) & 0x3f;\n  }\n\n  getTo() {\n    return this.val & 0x3f;\n  }\n\n  getPiece() {\n    return (this.val >>> 12) & 0x7;\n  }\n\n  getCaptPiece() {\n    return (this.val >>> 15) & 0x7;\n  }\n\n  getType() {\n    return this.val >>> 18;\n  }\n\n  isPromo() {\n    return [Types.NPROMO, Types.BPROMO,\n            Types.RPROMO, Types.QPROMO].includes(this.getType());\n  }\n\n  isCastle() {\n    return [Types.CSTL_KING, Types.CSTL_QUEEN].includes(this.getType());\n  }\n}\n\nmodule.exports = { Move, MoveTypes: Types };\n\n\n\n// WEBPACK FOOTER //\n// ./js/move/index.js","const { BitBoard, BBMasks } = require('../../bitboard');\n\nfunction stepMove(initial, noSo, eaWe) {\n  let positions = initial;\n\n  if (noSo > 0) {\n    positions = positions.shiftLeft(noSo * 8);\n  } else if (noSo < 0){\n    positions = positions.shiftRight(noSo * -8);\n  }\n\n  if (eaWe > 0) {\n    positions = positions.shiftLeft(eaWe).and(BBMasks.EAST_OF_COL[eaWe - 1]);\n  } else if (eaWe < 0){\n    positions = positions.shiftRight(-eaWe).and(BBMasks.WEST_OF_COL[eaWe + 8]);\n  }\n\n  return positions;\n}\n\nmodule.exports = stepMove;\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/movements/step_move.js","const ColsFiles = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n\nconst FilesCols = function() {\n  return ColsFiles.reduce((res, file, col) => {\n    res[file] = col;\n    return res;\n  }, {});\n}();\n\nconst RowsRanks = ['1', '2', '3', '4', '5', '6', '7', '8'];\n\nconst RanksRows = function() {\n  return RowsRanks.reduce((res, rank, row) => {\n    res[rank] = row;\n    return res;\n  }, {});\n}();\n\nconst GameStatus = {\n  ThreeFoldRep: 'Draw - Threefold Repetition',\n  MoveLimitExc: 'Draw - Move Limit Exceeded (50)',\n  Checkmate: 'Checkmate',\n  Stalemate: 'Stalemate',\n  PlayerTurn: 'Player Turn',\n  AITurn: 'AI Turn'\n};\n\nconst Selectors = {\n  BOARD_ID: \"#board\",\n  PIECE_CLASS: 'piece',\n  SQUARE_CLASS: 'square',\n  RANK_CLASS: 'rank',\n  FILE_CLASS: 'file'\n};\n\nmodule.exports = { ColsFiles, FilesCols, RowsRanks, RanksRows, Selectors, GameStatus };\n\n\n\n// WEBPACK FOOTER //\n// ./js/ui/constants.js","const UI = require('./ui');\n\n$(document).ready(function() {\n  const ui = new UI();\n  ui.run();\n});\n\n\n\n// WEBPACK FOOTER //\n// ./js/app.js","const Position = require('../position');\nconst AI = require('../ai');\nconst { PTypes, Colors, PieceTypeHTML } = require('../pieces');\nconst { MoveTypes } = require('../move');\nconst Util = require('./util.js');\nconst { ColsFiles, FilesCols,\n        RowsRanks, RanksRows,\n        Selectors, GameStatus } = require('./constants.js');\n\nclass UI {\n  constructor() {\n    this.ai = new AI();\n  }\n\n  run() {\n    this.setupButtons();\n    this.reset();\n  }\n\n  reset() {\n    $('#board').empty();\n    $('#move-history').empty();\n    $('.ai-stats-header').text(`AI Stats`);\n    $('.move-stats td').empty();\n    this.position = new Position();\n    const playerColor = $('input[name=\"color-option\"]:checked').val();\n    this.playerColor = parseInt(playerColor);\n    const aiThinkingTime = parseFloat($('#ai-time-val').text()) * 1000;\n    this.ai.setThinkingTime(aiThinkingTime);\n    this.drawBoard();\n    this.playNextTurn();\n  }\n\n  setupButtons() {\n    $('#unmake').click((event) => {\n      if ($(event.currentTarget).hasClass('active')) {\n        this.unmakePlayerMove();\n        this.playNextTurn();\n      }\n    });\n\n    $('#auto').click((event) => {\n      if ($(event.currentTarget).hasClass('active')) {\n        this.aiMove();\n      }\n    });\n\n    $('#ai-time-slider').slider({\n      value: this.ai.thinkingTime / 1000,\n      min: Math.round(Math.log(.01) * 1000) / 1000,\n      max: Math.round(Math.log(30) * 1000) / 1000,\n      step: 0.01,\n      slide: (event, ui) => {\n        const val = Math.round(Math.pow(Math.E, ui.value) * 1000);\n        $('#ai-time-val').text(Util.formatTime(val));\n      }\n    });\n\n    $('#new-game').click((event) => {\n      if ($(event.currentTarget).hasClass('active')) {\n        this.reset();\n      }\n    });\n\n    $('#ai-time-val').text(Util.formatTime(this.ai.thinkingTime));\n  }\n\n  deactivateBtns() {\n    $('.clickable').removeClass('active');\n  }\n\n  activateBtns() {\n    $('.clickable').addClass('active');\n    if (this.position.prevMoves.length === 0) {\n      $('#unmake').removeClass('active');\n    }\n  }\n\n  resetStatus() {\n    this.currMoves = this.position.generateLegalMoves();\n\n    if (this.currMoves.length === 0) {\n      if (this.position.isThreefoldRepetition()) {\n        this.status = GameStatus.ThreeFoldRep;\n      } else if (this.position.isMoveLimitExceeded()) {\n        this.status = GameStatus.MoveLimitExc;\n      } else if (this.position.inCheck(this.position.turn)) {\n        this.status = GameStatus.Checkmate;\n      } else {\n        this.status = GameStatus.Stalemate;\n      }\n      this.activateBtns();\n      $('#auto').removeClass('active');\n    } else {\n      if (this.position.turn === this.playerColor) {\n        this.status = GameStatus.PlayerTurn;\n      } else {\n        this.status = GameStatus.AITurn;\n      }\n    }\n\n    const statusEl = $('.status-header');\n\n    statusEl.text(this.status);\n  }\n\n  unmakePlayerMove() {\n    this.position.unmakePrevMove();\n    this.shiftFromMovesList();\n    if (this.position.turn !== this.playerColor) {\n      this.position.unmakePrevMove();\n      this.shiftFromMovesList();\n    }\n  }\n\n  playNextTurn() {\n    this.updatePieces();\n\n    if (this.position.turn === this.playerColor) {\n      this.setupPlayerMove();\n    } else {\n      this.aiMove();\n    }\n  }\n\n  populateStatsTable(moveStr, moveStats) {\n    $('.ai-stats-header').text(`AI Stats (${moveStr})`);\n    $('.depth-stat').text(moveStats.depth);\n    $('.runtime-stat').text(moveStats.runTime || 'N/A');\n    $('.explored-stat').text(moveStats.exploredPositions);\n    $('.main-search-stat').text(moveStats.mainSearchNodes);\n    $('.qsearch-stat').text(moveStats.qSearchNodes);\n    $('.ttable-hit-stat').text(moveStats.tTableHits);\n  }\n\n  createMoveItem(moveData) {\n    const moveItem = $('<tr class=\"move-item\"></tr>');\n    const moveStr = Util.formatMove(moveData.move, moveData.color);\n\n    moveItem.append($(`<td class=\"move-str\">${moveStr}</td>`));\n\n    if (moveData.stats) {\n      moveItem.addClass('stats-view-link clickable');\n      moveItem.click(() => this.populateStatsTable(moveStr, moveData.stats));\n    }\n\n    return moveItem;\n  }\n\n  addToMovesList(moveData) {\n    const movesHistory = $('#move-history');\n    const newMoveItem = this.createMoveItem(moveData);\n    movesHistory.prepend(newMoveItem);\n  }\n\n  shiftFromMovesList() {\n    $(\".move-item:first\").remove();\n  }\n\n  generateFileHeader() {\n    const newRow = $('<tr></tr>');\n    newRow.append(`<th>`);\n    ColsFiles.forEach((file) => {\n      newRow.append(`<th class=\"file\">${file}</th>`);\n    });\n    newRow.append(`<th>`);\n\n    return newRow;\n  }\n\n  generateSquare(file, rank) {\n    const fileRank = file + rank;\n\n    const newSquare = $(`<td id=\"${fileRank}\"></td>`);\n\n    const squareColor = Util.isDarkSquare(fileRank) ? 'dark' : 'light';\n    newSquare.addClass(squareColor + \" square\");\n\n    return newSquare;\n  }\n\n  drawBoard() {\n    const board = $('#board');\n\n    let newRankRow;\n    const rowsRanks = this.playerColor === Colors.WHITE ? RowsRanks : RowsRanks.slice().reverse();\n    rowsRanks.forEach((rank) => {\n      newRankRow = $('<tr>');\n      newRankRow.append(`<th class=\"rank\">${rank}</th>`);\n      ColsFiles.forEach((file) => {\n        newRankRow.append(this.generateSquare(file, rank));\n      });\n      newRankRow.append(`<th class=\"rank\">${rank}</th>`);\n      board.prepend(newRankRow);\n    });\n\n    board.prepend(this.generateFileHeader());\n    board.append(this.generateFileHeader());\n  }\n\n  updatePieces() {\n    $('.piece').remove();\n    const pieceTypes = Object.values(PTypes);\n    const pieces = this.position.pieces;\n    let fileRank;\n    let newPiece;\n\n    pieceTypes.forEach((pieceType) => {\n      pieces[pieceType].dup().pop1Bits((pos) => {\n        newPiece = $(`<div class=\"piece\">${PieceTypeHTML[pieceType]}<div>`);\n        if (pieces[Colors.WHITE].hasSetBit(pos)) {\n          newPiece.addClass('white');\n        } else {\n          newPiece.addClass('black');\n        }\n        fileRank = Util.fileRankFromPos(pos);\n        $(`#${fileRank}`).append(newPiece);\n      });\n    });\n  }\n\n  makeMove(move, stats) {\n    this.addToMovesList({ move, color: this.position.turn, stats });\n    if (stats) {\n      this.populateStatsTable(Util.formatMove(move, this.position.turn), stats);\n    }\n    this.position.makeMove(move);\n    this.playNextTurn();\n  }\n\n  isGameOver() {\n    return ![GameStatus.AITurn, GameStatus.PlayerTurn].includes(this.status);\n  }\n\n  aiMove() {\n    this.deactivateBtns();\n    this.resetStatus();\n    if (this.isGameOver()) { return; }\n\n    $('main').addClass('waiting');\n    setTimeout(() => {\n      const aiMoveData = this.ai.chooseMove(this.position, this.currMoves);\n      this.animateMove(aiMoveData.move, () => {\n        $('main').removeClass('waiting');\n        this.makeMove(aiMoveData.move, aiMoveData.performance);\n      });\n    }, 100);\n  }\n\n  animateMove(move, cb) {\n    const pieceEl = $(`#${Util.fileRankFromPos(move.getFrom())} .piece`);\n    const newSquare = $(`#${Util.fileRankFromPos(move.getTo())}`);\n\n    if (move.getCaptPiece()) {\n      const captPiece = $(`#${Util.fileRankFromPos(move.getTo())} .piece`);\n      const captOffset = captPiece.offset();\n      captPiece.css({\n        'position': 'absolute',\n        'left': captOffset.left,\n        'top': captOffset.top\n      });\n      captPiece.fadeOut(450);\n    }\n\n    const oldOffset = pieceEl.offset();\n    pieceEl.appendTo(newSquare);\n    const newOffset = pieceEl.offset();\n\n    const animPiece = pieceEl.clone().appendTo('body');\n    animPiece.css({\n      'position': 'absolute',\n      'left': oldOffset.left,\n      'top': oldOffset.top,\n      'z-index': 1000\n    });\n    pieceEl.hide();\n\n    animPiece.animate({'top': newOffset.top, 'left': newOffset.left}, 450, function(){\n      pieceEl.show();\n      animPiece.remove();\n      cb();\n    });\n  }\n\n  setupPlayerMove() {\n    this.activateBtns();\n    this.resetStatus();\n    if (this.isGameOver()) { return; }\n\n    const movesData = this.currMoves.map((move) => move.getData());\n    const moveFromTos = {};\n    const moveToFroms = {};\n\n    movesData.forEach((moveData) => {\n      moveFromTos[moveData.from] = moveFromTos[moveData.from] || [];\n      moveFromTos[moveData.from].push(moveData.to);\n\n      moveToFroms[moveData.to] = moveToFroms[moveData.to] || [];\n      moveToFroms[moveData.to].push(moveData.from);\n    });\n\n    this.activateDraggablePieces(moveFromTos);\n    this.activateDroppableSquares(moveToFroms);\n  }\n\n  activateDraggablePieces(moveFromTos) {\n    let fromFileRank;\n    let pieceEl;\n\n    Object.keys(moveFromTos).forEach((fromPos) => {\n      fromFileRank = Util.fileRankFromPos(fromPos);\n      pieceEl = $(`#${fromFileRank} .piece`);\n      pieceEl.draggable({\n        containment: $('#board'),\n        revert: 'invalid',\n        revertDuration: 300\n      });\n\n      pieceEl.mouseenter(() => {\n        if (pieceEl.hasClass('ui-draggable')) {\n          moveFromTos[fromPos].forEach((toPos) => {\n            $(`#${Util.fileRankFromPos(toPos)}`).addClass('can-move-to');\n          });\n        }\n      });\n\n      pieceEl.mouseleave(() => {\n        $('.square').removeClass('can-move-to');\n      });\n    });\n  }\n\n  activateDroppableSquares(moveToFroms) {\n    let destSq;\n    let originSquare;\n    let originPos;\n    let selectedMove;\n\n    Object.keys(moveToFroms).forEach((toPos) => {\n      destSq = $(`#${Util.fileRankFromPos(toPos)}`);\n      destSq.droppable({\n        accept: (draggable) => {\n          originSquare = $(draggable).parent().attr('id');\n          if (!originSquare) { return false; }\n          originPos = Util.posFromFileRank(originSquare);\n          return moveToFroms[toPos].includes(originPos);\n        },\n        drop: (event, ui) => {\n          this.makePlayerMove(ui.draggable, parseInt(toPos));\n        }\n      });\n    });\n  }\n\n  makePlayerMove(piece, toPos) {\n    const originSquare = $(piece).parent();\n    piece.remove();\n\n    $('.ui-draggable').draggable('destroy');\n    $('.ui-droppable').droppable('destroy');\n    $('.square').removeClass('can-move-to');\n    this.deactivateBtns();\n\n    const originPos = Util.posFromFileRank($(originSquare).attr('id'));\n    const destSq = $(`#${Util.fileRankFromPos(toPos)}`);\n    destSq.children().remove();\n\n    const selectedMoves = this.currMoves.filter((move) => {\n      return move.getFrom() === originPos &&\n             move.getTo() === toPos;\n    });\n\n    if (selectedMoves.length > 1) {\n      const color = this.playerColor === Colors.WHITE ? 'white' : 'black';\n      this.createPromoWindow(destSq, selectedMoves, color);\n    } else {\n      let selectedMove = selectedMoves[0];\n      this.makeMove(selectedMove);\n    }\n  }\n\n  createPromoWindow(destSq, promoMoves, color) {\n    const promoDiv = $(\"<div class='promo-window'></div>\");\n    const promoPieces = this.createPromoPieces(promoMoves, color);\n\n    let promoWinRow = $(\"<div class='promo-window-row'></div>\");\n    promoWinRow.append(promoPieces.slice(0, 2));\n    promoDiv.append(promoWinRow);\n\n    promoWinRow = $(\"<div class='promo-window-row'></div>\");\n    promoWinRow.append(promoPieces.slice(2));\n    promoDiv.append(promoWinRow);\n\n    destSq.append(promoDiv);\n  }\n\n  createPromoPieces(promoMoves, color) {\n    const PromosPTypes = {\n      [MoveTypes.NPROMO]: PTypes.KNIGHTS,\n      [MoveTypes.BPROMO]: PTypes.BISHOPS,\n      [MoveTypes.RPROMO]: PTypes.ROOKS,\n      [MoveTypes.QPROMO]: PTypes.QUEENS\n    };\n\n    const promoPieces = [];\n    let newPromoPiece;\n\n    promoMoves.forEach((promoMove) => {\n      newPromoPiece = this.createPromoPiece(promoMove, PromosPTypes[promoMove.getType()], color);\n      promoPieces.push(newPromoPiece);\n    });\n\n    return promoPieces;\n  }\n\n  createPromoPiece(move, pType, color) {\n    const promoPiece = $(`<div class='promo-piece piece ${color}'\">${PieceTypeHTML[pType]}</div>`);\n    promoPiece.click(() => {\n      $('.promo-window').remove();\n      this.makeMove(move);\n    });\n\n    return promoPiece;\n  }\n}\n\nmodule.exports = UI;\n\n\n\n// WEBPACK FOOTER //\n// ./js/ui/index.js","const { BitBoard, BBMasks } = require('../bitboard');\n\nconst { Move, MoveTypes } = require('../move');\n\nconst { PUtils, PTypes,\n        Colors, Dirs,\n        eachPieceType, PieceConv } = require('../pieces');\n\nconst { piecePosHashKeys,\n        epPosHashKeys,\n        castleHashKeys,\n        turnHashKeys } = require('./zhash_constants.js');\n\nconst defaultFenStr = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\n\nclass Position {\n  constructor(fenStr = defaultFenStr) {\n    const [ positions,\n            turnLetter,\n            castleRightsStr,\n            epSq,\n            halfMoveClock,\n            fullMoveClock ] = fenStr.split(' ');\n\n    this.pieces = this.fenPositionsToPieceBBs(positions);\n    this.castleRights = this.parseCastleRightsStr(castleRightsStr);\n    this.epBB = this.parseEpStr(epSq);\n    this.halfMoveClock = parseInt(halfMoveClock);\n    this.fullMoveClock = parseInt(fullMoveClock);\n    const turn = turnLetter === 'w' ? Colors.WHITE : Colors.BLACK;\n\n    this.prevMoves = [];\n    this.prevStates = [];\n\n    // cache for quick lookup by board position\n    this.pTypesLocations = this.createPTypesLocations();\n\n    // we separate our hashed values into piece position hashes\n    // and state hashes for simpler integration with our move making/unmaking process\n    // they are xor'd to represent the complete position\n    this.pPosHash = this.createPiecesPosHash();\n    this.stateHash = this.createStateHash();\n\n    this.setTurn(turn, this.getOtherColor(turn));\n\n    this.positionCounts = {};\n    this.addPositionCount();\n  }\n\n  fenPositionsToPieceBBs(positions) {\n    const rowStrs = positions.split('/');\n\n    const pieceBBs = this.createEmptyPiecesBBs();\n\n    let pos = 0;\n    rowStrs.forEach((rowStr) => {\n      rowStr.split('').forEach((char) => {\n        if (/[0-9]/.test(char)) {\n          pos += parseInt(char);\n        } else {\n          pieceBBs[PieceConv.letterToType(char)].setBit(pos);\n          pieceBBs[PieceConv.letterToColor(char)].setBit(pos);\n          pos++;\n        }\n      });\n    });\n\n    return pieceBBs;\n  }\n\n  createEmptyPiecesBBs() {\n    const pieces = [];\n\n    eachPieceType((type) => {\n      pieces[type] = new BitBoard();\n    });\n\n    Object.values(Colors).forEach((color) => {\n      pieces[color] = new BitBoard();\n    });\n\n    return pieces;\n  }\n\n  parseCastleRightsStr(castleRightsStr) {\n    const rightsPos = ['q', 'k', 'Q', 'K'];\n\n    return rightsPos.reduce((res, rightsLetter, pos) => {\n      if (castleRightsStr.includes(rightsLetter)) {\n        return (res ^ (1 << pos));\n      }\n    }, 0);\n  }\n\n  parseEpStr(epStr) {\n    if (/\\d+/.test(epStr)) {\n      return BitBoard.fromPos(parseInt(epStr));\n    } else {\n      return new BitBoard();\n    }\n  }\n\n  createPTypesLocations() {\n    let pos;\n    const res = [];\n\n    for (pos = 0; pos < 64; pos++) {\n      res[pos] = this.getPieceAt(pos);\n    }\n\n    return res;\n  }\n\n  createPiecesPosHash() {\n    let val = 0;\n\n    let pType;\n    const whitesPos = this.pieces[Colors.WHITE];\n    whitesPos.dup().pop1Bits((pos) => {\n      pType = this.pTypesLocations[pos];\n      val ^= piecePosHashKeys[pos][pType][Colors.WHITE];\n    });\n\n    const blacksPos = this.pieces[Colors.BLACK];\n    blacksPos.dup().pop1Bits((pos) => {\n      pType = this.pTypesLocations[pos];\n      val ^= piecePosHashKeys[pos][pType][Colors.BLACK];\n    });\n\n    return val;\n  }\n\n  createStateHash() {\n    let val = 0;\n    this.epBB.dup().pop1Bits((pos) => {\n      val ^= epPosHashKeys[pos];\n    });\n\n    let castleRightsPos;\n    for (castleRightsPos = 0; castleRightsPos < 4; castleRightsPos++) {\n      if ((this.castleRights & (1 << castleRightsPos)) >>> 0) {\n        val ^= castleHashKeys[castleRightsPos];\n      }\n    }\n\n    return val;\n  }\n\n  getHash() {\n    return this.pPosHash ^ this.stateHash ^ turnHashKeys[this.turn];\n  }\n\n  setTurn(turn, opp) {\n    this.turn = turn;\n    this.opp = opp;\n  }\n\n  swapTurn() {\n    this.setTurn(this.opp, this.turn);\n  }\n\n  getOtherColor(color) {\n    return color ^ Colors.BLACK;\n  }\n\n  // generates all pseudo legal moves, ie moves that may put the king\n  // in check but are otherwise legal\n  generatePseudoMoves(includeQuiet = true, checkNSDraw = true) {\n    const moves = [];\n    if (checkNSDraw && this.isNonStalemateDraw()) { return moves; }\n    this.addPawnMoves(moves, includeQuiet);\n    this.addNormalMoves(moves, includeQuiet);\n    this.addKingMoves(moves, includeQuiet);\n\n    return moves;\n  }\n\n  // generates moves with a filter for whether the move puts the king in check\n  // mainly used to determine checkmate or stalemate\n  generateLegalMoves() {\n    const pseudoMoves = this.generatePseudoMoves();\n    let moveData;\n    let isLegal;\n\n    const legals = [];\n    return pseudoMoves.filter((pseudoMove) => {\n      moveData = pseudoMove.getData();\n\n      this.testMove(moveData, (testsLegal) => {\n        isLegal = testsLegal;\n        return true;\n      });\n\n      return isLegal;\n    });\n  }\n\n  // inserts pawn moves into the moves array\n  addPawnMoves(moves, includeQuiet) {\n    const pawnsPos = this.getColorPieceSet(this.turn, PTypes.PAWNS);\n\n    if (includeQuiet) {\n      const notOccupied = this.getOccupied().not();\n\n      const pawnSinglePushes = PUtils[PTypes.PAWNS].singlePush(this.turn, pawnsPos, notOccupied);\n      this.addPawnMoveSet(pawnSinglePushes, 8 * PUtils[PTypes.PAWNS].DIRS[this.turn], moves);\n\n      const pawnDoublePushes = PUtils[PTypes.PAWNS].doublePush(this.turn, pawnsPos, notOccupied);\n      this.addPawnMoveSet(pawnDoublePushes, 16 * PUtils[PTypes.PAWNS].DIRS[this.turn], moves, false, true);\n    }\n\n    let oppPositions = this.pieces[this.opp].or(this.epBB);\n\n    const pawnLeftAttacks = PUtils[PTypes.PAWNS].attacksLeft(this.turn, pawnsPos, oppPositions);\n    this.addPawnMoveSet(pawnLeftAttacks, 7 * PUtils[PTypes.PAWNS].DIRS[this.turn], moves, true);\n\n    const pawnRightAttacks = PUtils[PTypes.PAWNS].attacksRight(this.turn, pawnsPos, oppPositions);\n    this.addPawnMoveSet(pawnRightAttacks, 9 * PUtils[PTypes.PAWNS].DIRS[this.turn], moves, true);\n  }\n\n  // takes a new position set for pawns and adds each corresponding move\n  // to the moves array, with special handling for en passants, promotions and double pushes\n\n  // note: unlike other pieces, we map pawn movements from the set of all existing pawns\n  // rather than each pawn individually, so the function takes a shift amount to determine\n  // the location of the individual pawn that moved to a new position\n  addPawnMoveSet(newPositions, shiftAmt, moves, isCapture, isDblPush) {\n    let from;\n    let captured = null;\n\n    newPositions.pop1Bits((pos) => {\n      from = pos - shiftAmt;\n      if (isDblPush) {\n        moves.push(new Move(from, pos, MoveTypes.DBL_PPUSH, PTypes.PAWNS));\n      } else if (isCapture && this.epBB.hasSetBit(pos)) {\n        moves.push(new Move(from, pos, MoveTypes.EP_CAPT, PTypes.PAWNS));\n      } else {\n        if (isCapture) { captured = this.pTypesLocations[pos]; }\n\n        if (PUtils[PTypes.PAWNS].PROMO_MASKS[this.turn].hasSetBit(pos)) {\n          this.addPromos(from, pos, moves, captured);\n        } else {\n          moves.push(new Move(from, pos, MoveTypes.NORMAL, PTypes.PAWNS, captured));\n        }\n      }\n    });\n  }\n\n  // adds a move to the moves array for each possible promotion type\n\n  // side note: I was curious about why you'd ever promote to rook or bishop\n  // and the reason is if promoting to a queen results in stalemate\n  addPromos(from, to, moves, captured) {\n    [MoveTypes.NPROMO, MoveTypes.BPROMO,\n     MoveTypes.RPROMO, MoveTypes.QPROMO].forEach((promoType) => {\n       moves.push(new Move(from, to, promoType, PTypes.PAWNS, captured));\n     });\n  }\n\n  // adds moves to the moves array for all pieces that don't\n  // have 'special' moves, ie not pawns or kings\n  addNormalMoves(moves, includeQuiet) {\n    const occupied = this.getOccupied();\n    const notOwnPieces = this.getNotOccupiedBy(this.turn);\n\n    const knightsPos = this.getColorPieceSet(this.turn, PTypes.KNIGHTS);\n    let knightMoves;\n    knightsPos.dup().pop1Bits((pos) => {\n      knightMoves = PUtils[PTypes.KNIGHTS].moves(pos, notOwnPieces);\n      this.addNormalMoveSet(knightMoves, pos, PTypes.KNIGHTS, moves, includeQuiet);\n    });\n\n    const bishopsPos = this.getColorPieceSet(this.turn, PTypes.BISHOPS);\n    let bishopMoves;\n    bishopsPos.dup().pop1Bits((pos) => {\n      bishopMoves = PUtils[PTypes.BISHOPS].moves(pos, occupied, notOwnPieces);\n      this.addNormalMoveSet(bishopMoves, pos, PTypes.BISHOPS, moves, includeQuiet);\n    });\n\n    const rooksPos = this.getColorPieceSet(this.turn, PTypes.ROOKS);\n    let rookMoves;\n    rooksPos.dup().pop1Bits((pos) => {\n      rookMoves = PUtils[PTypes.ROOKS].moves(pos, occupied, notOwnPieces);\n      this.addNormalMoveSet(rookMoves, pos, PTypes.ROOKS, moves, includeQuiet);\n    });\n\n    const queensPos = this.getColorPieceSet(this.turn, PTypes.QUEENS);\n    let queenMoves;\n    queensPos.dup().pop1Bits((pos) => {\n      queenMoves = PUtils[PTypes.QUEENS].moves(pos, occupied, notOwnPieces);\n      this.addNormalMoveSet(queenMoves, pos, PTypes.QUEENS, moves, includeQuiet);\n    });\n  }\n\n  // adds available king moves to the moves array\n  addKingMoves(moves, includeQuiet) {\n      const notOwnPieces = this.getNotOccupiedBy(this.turn);\n      const kingPos = this.getColorPieceSet(this.turn, PTypes.KINGS).bitScanForward();\n\n      // for testing purposes...\n      if (kingPos === null) { return; }\n\n      const normalMoves = PUtils[PTypes.KINGS].moves(kingPos, notOwnPieces);\n      this.addNormalMoveSet(normalMoves, kingPos, PTypes.KINGS, moves, includeQuiet);\n\n      if (includeQuiet) {\n        this.addCastleMoves(moves);\n      }\n  }\n\n  // takes a BB of possible new positions for a single\n  // piece and adds each corresponding move to the moves array\n  addNormalMoveSet(newPositions, startPos, pieceType, moves, includeQuiet) {\n    let newPos;\n    let newMove;\n    let captType;\n\n    newPositions.pop1Bits((pos) => {\n      captType = this.pieces[this.opp].hasSetBit(pos) ? this.pTypesLocations[pos] : null;\n      if (includeQuiet || captType) {\n        moves.push(new Move(startPos, pos, MoveTypes.NORMAL, pieceType, captType));\n      }\n    });\n  }\n\n  // adds available castling moves to the moves array\n  addCastleMoves(moves) {\n    const turnCastleRights = this.getCastleRights(this.turn);\n    const startPos = PUtils[PTypes.KINGS].INIT_POS[this.turn];\n    const notOccupied = this.getOccupied().not();\n\n    if ((turnCastleRights & 0b1) && PUtils[PTypes.KINGS].canCastle(this.turn, Dirs.WEST, notOccupied)) {\n      moves.push(new Move(startPos, startPos - 2, MoveTypes.CSTL_QUEEN, PTypes.KINGS));\n    }\n\n    if ((turnCastleRights & 0b10) && PUtils[PTypes.KINGS].canCastle(this.turn, Dirs.EAST, notOccupied)) {\n      moves.push(new Move(startPos, startPos + 2, MoveTypes.CSTL_KING, PTypes.KINGS));\n    }\n  }\n\n  // returns 2bit value for the color's castling rights\n  // left bit => king-side rights\n  // right bit => queen-side rights\n  getCastleRights(color) {\n    return color === Colors.WHITE ? this.castleRights & 0b11 : this.castleRights >>> 2;\n  }\n\n  // returns a BB with occupied positions for a given color and piece type\n  getColorPieceSet(color, pieceType) {\n    return this.pieces[color].and(this.pieces[pieceType]);\n  }\n\n  // returns a BB of all occupied positions\n  getOccupied() {\n    return this.pieces[Colors.WHITE].or(this.pieces[Colors.BLACK]);\n  }\n\n  // returns a BB of all positions that this color does not occupy\n  getNotOccupiedBy(color) {\n    return this.pieces[color].not();\n  }\n\n  // returns the piece type that occupies the given position\n  // if no piece is found, returns null\n  getPieceAt(pos) {\n    const types = Object.values(PTypes);\n\n    let idx;\n    let type;\n\n    for (idx = 0; idx < types.length; idx++) {\n      type = types[idx];\n      if (this.pieces[type].hasSetBit(pos)) {\n        return type;\n      }\n    }\n\n    return null;\n  }\n\n  // makes a specified move if it's legal, updating the current position\n  // returns true if the move is made, false otherwise\n  makeMove(move) {\n    const moveData = move.getData();\n\n    let isLegal;\n    this.testMove(moveData, (testsLegal) => {\n      isLegal = testsLegal;\n      return !isLegal;\n    });\n\n    if (!isLegal) { return false; }\n    this.setNewState(moveData);\n    this.execMoveType(moveData.from, moveData.to, moveData.type);\n\n    this.prevMoves.push(move);\n    this.swapTurn();\n    this.addPositionCount();\n\n    return true;\n  }\n\n  // makes the piece movements needed to determine\n  // if the move is legal, sends a boolean for the legality\n  // to the callback and undoes the piece movements if the callback\n  // returns true\n  testMove(moveData, cb) {\n    if (moveData.captPieceType) {\n      this.clearPieceAt(moveData.to, this.opp, moveData.captPieceType);\n    }\n\n    if (moveData.isPromo) {\n      this.clearPieceAt(moveData.from, this.turn, PTypes.PAWNS);\n    } else {\n      this.movePiece(moveData.from, moveData.to, this.turn, moveData.pieceType);\n    }\n\n    const undo = cb(this.testsLegal(moveData));\n    if (!undo) { return; }\n\n    if (moveData.isPromo) {\n      this.setPieceAt(moveData.from, this.turn, PTypes.PAWNS);\n    } else {\n      this.movePiece(moveData.to, moveData.from, this.turn, moveData.pieceType);\n    }\n\n    if (moveData.captPieceType) {\n      this.setPieceAt(moveData.to, this.opp, moveData.captPieceType);\n    }\n  }\n\n  // returns boolean for whether or not move is legal\n  // based on the current position\n  testsLegal(moveData) {\n    if (moveData.isCastle) {\n      return this.isLegalCastle(moveData.from, moveData.type);\n    } else {\n      return !this.inCheck(this.turn);\n    }\n  }\n\n  isLegalCastle(pos, castleType) {\n    const dir = castleType === MoveTypes.CSTL_KING ? 1 : -1;\n    let count = 0;\n\n    while (count <= 2) {\n      if (this.isAttacked(pos, this.turn)) { return false; }\n      count++;\n      pos += dir;\n    }\n\n    return true;\n  }\n\n  // returns boolean for whether the provided color's king is in check\n  inCheck(color) {\n    const kingPos = this.getColorPieceSet(color, PTypes.KINGS).bitScanForward();\n    return this.isAttacked(kingPos, color);\n  }\n\n\n  // returns boolean for whether any opponent color piece is attacking the provided position\n  isAttacked(pos, color) {\n    const posBB = BitBoard.fromPos(pos);\n    const occupied = this.getOccupied();\n    const oppColor = this.getOtherColor(color);\n    const pawns = this.getColorPieceSet(oppColor, PTypes.PAWNS);\n\n    const queenBB = this.getColorPieceSet(oppColor, PTypes.QUEENS);\n    return (!PUtils[PTypes.PAWNS].attacksLeft(oppColor, pawns, posBB).isZero() ||\n            !PUtils[PTypes.PAWNS].attacksRight(oppColor, pawns, posBB).isZero() ||\n            !PUtils[PTypes.KNIGHTS].moves(pos, this.getColorPieceSet(oppColor, PTypes.KNIGHTS)).isZero() ||\n            !PUtils[PTypes.BISHOPS].moves(pos, occupied, this.getColorPieceSet(oppColor, PTypes.BISHOPS).or(queenBB)).isZero() ||\n            !PUtils[PTypes.ROOKS].moves(pos, occupied, this.getColorPieceSet(oppColor, PTypes.ROOKS).or(queenBB)).isZero() ||\n            !PUtils[PTypes.KINGS].moves(pos, this.getColorPieceSet(oppColor, PTypes.KINGS)).isZero());\n  }\n\n  setNewState(moveData) {\n    this.addPrevState();\n\n    this.adjustCastleRights(moveData);\n    this.setNewEpState();\n    this.updateClock(moveData);\n  }\n\n  // adds the current state values to the prevStates array\n  // used for move unmaking purposes\n  addPrevState() {\n    const state = { epBB: this.epBB,\n                    castleRights: this.castleRights,\n                    stateHash: this.stateHash,\n                    halfMoveClock: this.halfMoveClock,\n                    fullMoveClock: this.fullMoveClock\n                  };\n    this.prevStates.push(state);\n  }\n\n  // makes adjustments to the castling rights\n  // if a rook or king is moved\n  adjustCastleRights(moveData) {\n    const turnCastleRights = this.getCastleRights(this.turn);\n    let dir;\n    if (moveData.pieceType === PTypes.KINGS && turnCastleRights) {\n      this.clearCastleRights(this.turn, Dirs.EAST);\n      this.clearCastleRights(this.turn, Dirs.WEST);\n    } else if (moveData.pieceType === PTypes.ROOKS && turnCastleRights) {\n      dir = moveData.from > PUtils[PTypes.KINGS].INIT_POS[this.turn] ? Dirs.EAST : Dirs.WEST;\n      this.clearCastleRights(this.turn, dir);\n    }\n\n    if (moveData.captPieceType === PTypes.ROOKS && this.getCastleRights(this.opp)) {\n      dir = moveData.to > PUtils[PTypes.KINGS].INIT_POS[this.opp] ? Dirs.EAST : Dirs.WEST;\n      this.clearCastleRights(this.opp, dir);\n    }\n  }\n\n  clearCastleRights(color, dir) {\n    let clearRightsPos = 0;\n    if (color === Colors.BLACK) { clearRightsPos += 2; }\n    if (dir === Dirs.EAST) { clearRightsPos += 1; }\n\n    let clearRightsMask = 1 << clearRightsPos;\n    if (clearRightsMask & this.castleRights) {\n      this.castleRights = (this.castleRights & (~clearRightsMask)) >>> 0;\n      this.stateHash ^= castleHashKeys[clearRightsPos];\n    }\n  }\n\n  setNewEpState() {\n    const epPos = this.epBB.bitScanForward();\n    if (epPos !== null) { this.stateHash ^= epPosHashKeys[epPos]; }\n    this.epBB = new BitBoard();\n  }\n\n  updateClock(moveData) {\n    if (this.turn === Colors.BLACK) {\n      this.fullMoveClock++;\n    }\n\n    if (moveData.captPieceType || moveData.pieceType === PTypes.PAWNS) {\n      this.halfMoveClock = 0;\n    } else {\n      this.halfMoveClock++;\n    }\n  }\n\n  // makes special adjustments to the position based on the move type\n  execMoveType(from, to, type) {\n    switch(type) {\n      case MoveTypes.NORMAL:\n        return;\n      case MoveTypes.DBL_PPUSH:\n        let epPos = to + (-PUtils[PTypes.PAWNS].DIRS[this.turn] * 8);\n        this.epBB = BitBoard.fromPos(epPos);\n        this.stateHash ^= epPosHashKeys[epPos];\n        break;\n      case MoveTypes.CSTL_KING:\n        this.movePiece(from + 3, from + 1, this.turn, PTypes.ROOKS);\n        break;\n      case MoveTypes.CSTL_QUEEN:\n        this.movePiece(from - 4, from - 1, this.turn, PTypes.ROOKS);\n        break;\n      case MoveTypes.EP_CAPT:\n        let capturedPos = to - (PUtils[PTypes.PAWNS].DIRS[this.turn] * 8);\n        this.clearPieceAt(capturedPos, this.opp, PTypes.PAWNS);\n        break;\n      case MoveTypes.NPROMO:\n        this.setPieceAt(to, this.turn, PTypes.KNIGHTS);\n        break;\n      case MoveTypes.BPROMO:\n        this.setPieceAt(to, this.turn, PTypes.BISHOPS);\n        break;\n      case MoveTypes.RPROMO:\n        this.setPieceAt(to, this.turn, PTypes.ROOKS);\n        break;\n      case MoveTypes.QPROMO:\n        this.setPieceAt(to, this.turn, PTypes.QUEENS);\n        break;\n    }\n  }\n\n  addPositionCount() {\n    const currHash = this.getHash();\n    if (!this.positionCounts[currHash]) {\n      this.positionCounts[currHash] = 1;\n    } else {\n      this.positionCounts[currHash] += 1;\n    }\n  }\n\n  // unmakes the previous move, updating the current position\n  unmakePrevMove() {\n    const prevMove = this.prevMoves.pop();\n    if (!prevMove) { return false; }\n\n    this.subtractPositionCount();\n    this.swapTurn();\n\n    const moveData = prevMove.getData();\n\n    this.reverseMoveType(moveData.from, moveData.to, moveData.type);\n    this.restorePrevState();\n\n    if (moveData.isPromo) {\n      this.setPieceAt(moveData.from, this.turn, PTypes.PAWNS);\n    } else {\n      this.movePiece(moveData.to, moveData.from, this.turn, moveData.pieceType);\n    }\n\n\n    if (moveData.captPieceType) {\n      this.setPieceAt(moveData.to, this.opp, moveData.captPieceType);\n    }\n\n    return true;\n  }\n\n  restorePrevState() {\n    const prevState = this.prevStates.pop();\n    this.epBB = prevState.epBB;\n    this.castleRights = prevState.castleRights;\n    this.stateHash = prevState.stateHash;\n    this.halfMoveClock = prevState.halfMoveClock;\n    this.fullMoveClock = prevState.fullMoveClock;\n  }\n\n  subtractPositionCount() {\n    const currHash = this.getHash();\n    this.positionCounts[currHash] -= 1;\n    if (this.positionCounts[currHash] <= 0) {\n      delete this.positionCounts[currHash];\n    }\n  }\n\n  // unmakes special adjustments to the position based on the move type\n  reverseMoveType(from, to, type) {\n    switch(type) {\n      case MoveTypes.NORMAL:\n      case MoveTypes.DBL_PPUSH:\n        return;\n      case MoveTypes.CSTL_KING:\n        this.movePiece(from + 1, from + 3, this.turn, PTypes.ROOKS);\n        break;\n      case MoveTypes.CSTL_QUEEN:\n        this.movePiece(from - 1, from - 4, this.turn, PTypes.ROOKS);\n        break;\n      case MoveTypes.EP_CAPT:\n        let capturedPos = to - (PUtils[PTypes.PAWNS].DIRS[this.turn] * 8);\n        this.setPieceAt(capturedPos, this.opp, PTypes.PAWNS);\n        break;\n      case MoveTypes.NPROMO:\n        this.clearPieceAt(to, this.turn, PTypes.KNIGHTS);\n        break;\n      case MoveTypes.BPROMO:\n        this.clearPieceAt(to, this.turn, PTypes.BISHOPS);\n        break;\n      case MoveTypes.RPROMO:\n        this.clearPieceAt(to, this.turn, PTypes.ROOKS);\n        break;\n      case MoveTypes.QPROMO:\n        this.clearPieceAt(to, this.turn, PTypes.QUEENS);\n        break;\n    }\n  }\n\n  // moves piece from one position to another\n  movePiece(from, to, color, pieceType) {\n    this.clearPieceAt(from, color, pieceType);\n    this.setPieceAt(to, color, pieceType);\n  }\n\n  // marks the given color and pieceType BBs as occupied at the specified position\n  setPieceAt(pos, color, pieceType) {\n    this.pieces[color].setBit(pos);\n    this.pieces[pieceType].setBit(pos);\n    this.pTypesLocations[pos] = pieceType;\n    this.pPosHash ^= piecePosHashKeys[pos][pieceType][color];\n  }\n\n  // marks the given color and pieceType BBs as unoccupied at the specified position\n  clearPieceAt(pos, color, pieceType) {\n    this.pieces[color].clearBit(pos);\n    this.pieces[pieceType].clearBit(pos);\n    this.pTypesLocations[pos] = null;\n    this.pPosHash ^= piecePosHashKeys[pos][pieceType][color];\n  }\n\n  isNonStalemateDraw() {\n    return this.isMoveLimitExceeded() || this.isThreefoldRepetition();\n  }\n\n  isThreefoldRepetition() {\n    return this.positionCounts[this.getHash()] === 3;\n  }\n\n  isMoveLimitExceeded() {\n    return this.halfMoveClock >= 50;\n  }\n}\n\nmodule.exports = Position;\n\n\n\n// WEBPACK FOOTER //\n// ./js/position/index.js","const BitBoard = require('./bitboard.js');\n\n// this file includes static sets of bitboards that\n// are commonly used throughout the program\n\nconst FULL_BOARD = new BitBoard().not();\n\nconst COLS = function() {\n  let colIdx = 0;\n  let cols = [];\n  while (colIdx < 8) {\n    cols.push(BitBoard.fromCol(colIdx));\n    colIdx++;\n  }\n\n  return cols;\n}();\n\n\nconst ROWS = function() {\n  let rowIdx = 0;\n  let rows = [];\n  while (rowIdx < 8) {\n    rows.push(BitBoard.fromRow(rowIdx));\n    rowIdx++;\n  }\n\n  return rows;\n}();\n\n\nconst DIAGS = function() {\n  const diags = [];\n  let pos = 56;\n\n  while (pos >= 0) {\n    diags.push(BitBoard.upperRightDiag(pos));\n    pos -= 8;\n  }\n\n  pos = 1;\n\n  while (pos < 8) {\n    diags.push(BitBoard.upperRightDiag(pos));\n    pos++;\n  }\n\n  return diags;\n}();\n\n\nconst ANTI_DIAGS = function() {\n  const antiDiags = [];\n  let pos = 0;\n\n  while (pos < 8) {\n    antiDiags.push(BitBoard.upperLeftDiag(pos));\n    pos++;\n  }\n\n  pos = 15;\n  while (pos < 64) {\n    antiDiags.push(BitBoard.upperLeftDiag(pos));\n    pos += 8;\n  }\n\n  return antiDiags;\n}();\n\nconst NORTH_OF_ROW = function() {\n  const res = [];\n  let bb = FULL_BOARD;\n  let idx = 0;\n\n  while (idx <= 7) {\n    bb = bb.xor(ROWS[idx]);\n    res.push(bb);\n    idx++;\n  }\n\n  return res;\n}();\n\nconst SOUTH_OF_ROW = function() {\n  const res = [];\n  let bb = new BitBoard();\n  let idx = 0;\n\n  while (idx <= 7) {\n    res.push(bb);\n    bb = bb.or(ROWS[idx]);\n    idx++;\n  }\n\n  return res;\n}();\n\nconst EAST_OF_COL = function() {\n  const res = [];\n  let bb = FULL_BOARD;\n  let idx = 0;\n\n  while (idx <= 7) {\n    bb = bb.xor(COLS[idx]);\n    res.push(bb);\n    idx++;\n  }\n\n  return res;\n}();\n\nconst WEST_OF_COL = function() {\n  const res = [];\n  let bb = new BitBoard();\n  let idx = 0;\n\n  while (idx <= 7) {\n    res.push(bb);\n    bb = bb.or(COLS[idx]);\n    idx++;\n  }\n\n  return res;\n}();\n\nmodule.exports = {\n  FULL_BOARD,\n  COLS,\n  ROWS,\n  DIAGS,\n  ANTI_DIAGS,\n  NORTH_OF_ROW,\n  SOUTH_OF_ROW,\n  EAST_OF_COL,\n  WEST_OF_COL\n};\n\n\n\n// WEBPACK FOOTER //\n// ./js/bitboard/masks.js","// https://www.chessprogramming.org/Encoding_Moves#From-To_Based\n// require('../string_contants.js');\n\nconst typesArr = ['NORMAL', 'DBL_PPUSH',\n                  'CSTL_KING', 'CSTL_QUEEN',\n                  'EP_CAPT', 'NPROMO',\n                  'BPROMO','RPROMO', 'QPROMO'];\n\nconst Types = typesArr.reduce((res, type, idx) => {\n  res[type] = idx;\n  return res;\n}, {});\n\nmodule.exports = { Types };\n\n\n\n// WEBPACK FOOTER //\n// ./js/move/constants.js","const stepMove = require('./movements/step_move.js');\nconst { BBMasks } = require('../bitboard');\nconst { Colors } = require('./constants.js');\n\nconst DIRS = {\n  [Colors.WHITE]: 1,\n  [Colors.BLACK]: -1\n};\n\nconst INIT_MASKS = {\n  [Colors.WHITE]: BBMasks.ROWS[1],\n  [Colors.BLACK]: BBMasks.ROWS[6]\n};\n\nconst Pawns = {\n  value: 100,\n  positionValues: [\n\t\t0, 0, 0, 0, 0, 0, 0, 0,\n\t\t50, 50, 50, 50, 50, 50, 50, 50,\n\t\t10, 10, 20, 30, 30, 20, 10, 10,\n\t\t5, 5, 10, 25, 25, 10, 5, 5,\n\t\t0, 0, 0, 20, 20, 0, 0, 0,\n\t\t5, -5, -10, 0, 0, -10, -5, 5,\n\t\t5, 10, 10, -20, -20, 10, 10, 5,\n\t\t0, 0, 0, 0, 0, 0, 0, 0\n\t],\n  DIRS,\n  PROMO_MASKS: { [Colors.WHITE]: BBMasks.ROWS[7],\n                 [Colors.BLACK]: BBMasks.ROWS[0]\n               },\n  attacksLeft: (color, positions, oppPieces) => {\n    return stepMove(positions, DIRS[color], -DIRS[color]).and(oppPieces);\n  },\n  attacksRight: (color, positions, oppPieces) => {\n    return stepMove(positions, DIRS[color], DIRS[color]).and(oppPieces);\n  },\n  singlePush: (color, positions, notOccupied) => {\n    return stepMove(positions, DIRS[color], 0).and(notOccupied);\n  },\n  doublePush: (color, positions, notOccupied) => {\n    const onePush = stepMove(positions.and(INIT_MASKS[color]), DIRS[color], 0).and(notOccupied);\n    return stepMove(onePush, DIRS[color], 0).and(notOccupied);\n  }\n};\n\nmodule.exports = Pawns;\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/pawns.js","const { KNIGHT_MOVES } = require('./movements/masks.js');\n\nconst Knight = {\n  value: 325,\n  positionValues: [\n\t\t-50, -40, -30, -30, -30, -30, -40, -50,\n\t\t-40, -20, 0, 0, 0, 0, -20, -40,\n\t\t-30, 0, 10, 15, 15, 10, 0, -30,\n\t\t-30, 5, 15, 20, 20, 15, 5, -30,\n\t\t-30, 0, 15, 20, 20, 15, 0, -30,\n\t\t-30, 5, 10, 15, 15, 10, 5, -30,\n\t\t-40, -20, 0, 5, 5, 0, -20, -40,\n\t\t-50, -40, -30, -30, -30, -30, -40, -50\n\t],\n  moves: (position, notOwnPieces) => {\n    return KNIGHT_MOVES[position].and(notOwnPieces);\n  }\n};\n\nmodule.exports = Knight;\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/knight.js","const { diag } = require('./movements/slide_moves.js');\n\nconst Bishop = {\n  value: 325,\n  positionValues: [\n\t\t-20, -10, -10, -10, -10, -10, -10, -20,\n\t\t-10, 0, 0, 0, 0, 0, 0, -10,\n\t\t-10, 0, 5, 10, 10, 5, 0, -10,\n\t\t-10, 5, 5, 10, 10, 5, 5, -10,\n\t\t-10, 0, 10, 10, 10, 10, 0, -10,\n\t\t-10, 10, 10, 10, 10, 10, 10, -10,\n\t\t-10, 5, 0, 0, 0, 0, 5, -10,\n\t\t-20, -10, -10, -10, -10, -10, -10, -20\n\t],\n  moves: (position, occupied, notOwnPieces) => {\n    return diag(position, occupied, notOwnPieces);\n  }\n};\n\nmodule.exports = Bishop;\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/bishop.js","const { horizVert } = require('./movements/slide_moves.js');\n\nconst Rook = {\n  value: 500,\n  positionValues:\t[\n\t\t0, 0, 0, 0, 0, 0, 0, 0,\n\t\t5, 10, 10, 10, 10, 10, 10, 5,\n\t\t-5, 0, 0, 0, 0, 0, 0, -5,\n\t\t-5, 0, 0, 0, 0, 0, 0, -5,\n\t\t-5, 0, 0, 0, 0, 0, 0, -5,\n\t\t-5, 0, 0, 0, 0, 0, 0, -5,\n\t\t-5, 0, 0, 0, 0, 0, 0, -5,\n\t\t0, 0, 0, 5, 5, 0, 0, 0\n\t],\n  moves: (position, occupied, notOwnPieces) => {\n    return horizVert(position, occupied, notOwnPieces);\n  },\n};\n\nmodule.exports = Rook;\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/rook.js","const { diag, horizVert } = require('./movements/slide_moves.js');\n\nconst Queen = {\n  value: 1050,\n  positionValues: [\n\t\t-20, -10, -10, -5, -5, -10, -10, -20,\n\t\t-10, 0, 0, 0, 0, 0, 0, -10,\n\t\t-10, 0, 5, 5, 5, 5, 0, -10,\n\t\t-5, 0, 5, 5, 5, 5, 0, -5,\n\t\t0, 0, 5, 5, 5, 5, 0, -5,\n\t\t-10, 5, 5, 5, 5, 5, 0, -10,\n\t\t-10, 0, 5, 0, 0, 0, 0, -10,\n\t\t-20, -10, -10, -5, -5, -10, -10, -20\n\t],\n  moves: (position, occupied, notOwnPieces) => {\n    return diag(position, occupied, notOwnPieces).or(horizVert(position, occupied, notOwnPieces));\n  }\n};\n\nmodule.exports = Queen;\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/queen.js","const { BBMasks } = require('../bitboard');\nconst Dirs = require('./movements/dir_constants.js');\nconst { KING_MOVES, SLIDE_MOVES } = require('./movements/masks.js');\nconst { Colors } = require('./constants.js');\n\nconst INIT_POS = {\n  [Colors.BLACK]: 60,\n  [Colors.WHITE]: 4\n};\n\nconst King = {\n  value: 40000,\n  positionValues:\t[\n\t\t-30, -40, -40, -50, -50, -40, -40, -30,\n\t\t-30, -40, -40, -50, -50, -40, -40, -30,\n\t\t-30, -40, -40, -50, -50, -40, -40, -30,\n\t\t-30, -40, -40, -50, -50, -40, -40, -30,\n\t\t-20, -30, -30, -40, -40, -30, -30, -20,\n\t\t-10, -20, -20, -20, -20, -20, -20, -10,\n\t\t 20, 20, 0, 0, 0, 0, 20, 20,\n\t\t 20, 30, 10, 0, 0, 10, 30, 20\n\t],\n  INIT_POS,\n  moves: (position, notOwnPieces) => {\n    return KING_MOVES[position].and(notOwnPieces);\n  },\n  canCastle: (color, dir, notOccupied) => {\n    const castleSlide = SLIDE_MOVES[INIT_POS[color]][dir].and(notOccupied);\n    if (dir === Dirs.EAST) {\n      return castleSlide.popCount() === 2;\n    } else {\n      return castleSlide.popCount() === 3;\n    }\n  }\n};\n\nmodule.exports = King;\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/king.js","const { Types, Colors, PieceTypeLetters } = require('./constants.js');\n\nfunction pieceToLetter(type, color) {\n  if (color === Colors.WHITE) {\n    return PieceTypeLetters[type];\n  } else if (color === Colors.BLACK) {\n    return PieceTypeLetters[type].toUpperCase();\n  }\n}\n\nfunction letterToColor(letter) {\n  return letter.toUpperCase() === letter ? Colors.BLACK : Colors.WHITE;\n}\n\nfunction letterToType(letter) {\n  const pieceTypes = Object.values(Types);\n  let pieceType;\n  let idx;\n\n  for (idx = 0; idx < pieceTypes.length; idx++) {\n    if (PieceTypeLetters[pieceTypes[idx]] === letter.toLowerCase()) {\n      pieceType = pieceTypes[idx];\n      break;\n    }\n  }\n\n  return pieceType;\n}\n\nmodule.exports = { pieceToLetter, letterToColor, letterToType };\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/conversions.js","const { Types } = require('./constants.js');\n\nfunction eachPieceType(cb) {\n  let type;\n  for (type = Types.PAWNS; type <= Types.KINGS; type++) {\n    cb(type);\n  }\n}\n\nmodule.exports = eachPieceType;\n\n\n\n// WEBPACK FOOTER //\n// ./js/pieces/each_piece_type.js","const { PTypes, PUtils, Colors, eachPieceType } = require('../pieces');\n\n// we store zobrist hash values as signed 32bit integers\n\nfunction randSigned32Bit() {\n  const positive = [true, false][Math.floor(Math.random() * 2)];\n  if (positive) {\n    return Math.floor(Math.random() * (Math.pow(2, 31) - 1));\n  } else {\n    return -Math.floor(Math.random() * (Math.pow(2, 31)));\n  }\n}\n\nconst piecePosHashKeys = function() {\n  let res = [];\n  let pos;\n  let newPosKeys;\n\n  const addPTypeKeys = (pType) => {\n    res[pos][pType] = {};\n    res[pos][pType][Colors.WHITE] = randSigned32Bit();\n    res[pos][pType][Colors.BLACK] = randSigned32Bit();\n  };\n\n  for (pos = 0; pos < 64; pos++) {\n    res[pos] = {};\n    eachPieceType((pType) => addPTypeKeys(pType));\n  }\n\n  return res;\n}();\n\nconst epPosHashKeys = function() {\n  let res = {};\n  let pos;\n\n  // can only en passant onto 3rd or 6th row\n  for (pos = 16; pos <= 23; pos++) {\n    res[pos] = randSigned32Bit();\n  }\n\n  for (pos = 40; pos <= 47; pos++) {\n    res[pos] = randSigned32Bit();\n  }\n\n  return res;\n}();\n\nconst castleHashKeys = function() {\n  let res = [];\n  let rightsIdx;\n\n  for (rightsIdx = 0; rightsIdx < 4; rightsIdx++) {\n    res[rightsIdx] = randSigned32Bit();\n  }\n\n  return res;\n}();\n\nconst turnHashKeys = function() {\n  const res = [];\n  res[Colors.WHITE] = randSigned32Bit();\n  res[Colors.BLACK] = randSigned32Bit();\n\n  return res;\n}();\n\nmodule.exports = { piecePosHashKeys, epPosHashKeys, castleHashKeys, turnHashKeys };\n\n\n\n// WEBPACK FOOTER //\n// ./js/position/zhash_constants.js","const MoveSearch = require('./move_search.js');\n\nclass AI {\n  constructor() {\n    this.thinkingTime = 1000;\n    this.prevPerformance = null;\n  }\n\n  setThinkingTime(thinkingTime) {\n    this.thinkingTime = thinkingTime;\n  }\n\n  chooseMove(position, availableMoves) {\n    const moveSearch = new MoveSearch(position, availableMoves);\n    const bestMove = moveSearch.findBest(this.thinkingTime);\n    const perfResults = moveSearch.getPerformance();\n\n    return { move: bestMove, performance: perfResults };\n  }\n}\n\nmodule.exports = AI;\n\n\n\n// WEBPACK FOOTER //\n// ./js/ai/index.js","const { PTypes, PUtils,\n        Colors, Dirs,\n        eachPieceType } = require('../pieces');\nconst { TransposTable, TABLE_SCORE_TYPES } = require('./transpos_table.js');\nconst KillerMoveList = require('./killer_move_list.js');\nconst PerfMonitor = require('./perf_monitor.js');\n\nconst EARLY_EXIT = 'early exit';\n\nclass MoveSearch {\n  constructor(position, initAvailable) {\n    this.position = position;\n    this.initAvailable = initAvailable;\n    this.transPosTable = new TransposTable();\n    this.killerMoveList = new KillerMoveList();\n    this.perfMonitor = new PerfMonitor();\n  }\n\n  findBest(thinkingTime) {\n    this.perfMonitor.setStartTime();\n    this.endTime = Date.now() + thinkingTime;\n\n    this.maxDepth = 1;\n    while (Date.now() < this.endTime && this.maxDepth < 30) {\n      this.killerMoveList.addSlot();\n      this.negaMax(this.maxDepth, -Infinity, Infinity);\n      this.maxDepth++;\n    }\n\n    if (this.maxDepth >= 30) {\n      console.log('Approaching draw...');\n    } else {\n      if (!this.perfMonitor.depth) { this.perfMonitor.setDepth(this.maxDepth - 1); }\n      this.perfMonitor.setEndTime();\n      this.perfMonitor.printResults();\n    }\n\n    const currNodeEntry = this.transPosTable.getEntry(this.position.getHash());\n    if (currNodeEntry && currNodeEntry.bestMove) {\n      return currNodeEntry.bestMove;\n    } else {\n      return this.initAvailable[Math.floor(Math.random() * this.initAvailable.length)];\n    }\n  }\n\n  getPerformance() {\n    return this.perfMonitor.getResults();\n  }\n\n  quiescenceSearch(alpha, beta) {\n    if (Date.now() > this.endTime) {\n      this.perfMonitor.setDepth(this.maxDepth - 1);\n      return EARLY_EXIT;\n    }\n    this.perfMonitor.logQuiescentNode();\n    const standPatVal = this.evaluate();\n\n    if (standPatVal >= beta) {\n      return beta;\n    } else if (standPatVal > alpha) {\n      alpha = standPatVal;\n    }\n\n    let inCheck = this.position.inCheck(this.position.turn);\n\n    function calculateMoveOrderScore(move) {\n      let score = move.getCaptPiece()? ((1 + move.getCaptPiece()) / (1 + move.getPiece())): 0;\n      score = score * 10 + move.getPiece();\n      score = score * 10 + move.getType();\n\n      return score;\n    }\n\n    // include quiet moves (ie non captures) only if the king is in check;\n    const moves = this.sortMoves(this.position.generatePseudoMoves(inCheck), calculateMoveOrderScore);\n\n    let moveIdx;\n    let score;\n\n    for (moveIdx = 0; moveIdx < moves.length; moveIdx++) {\n      if (this.position.makeMove(moves[moveIdx])) {\n        score = -this.quiescenceSearch(-beta, -alpha);\n        this.position.unmakePrevMove();\n\n        if (score >= beta) { return beta; }\n        if (score > alpha) { alpha = score; }\n      }\n    }\n\n    return alpha;\n  }\n\n  negaMax(depth, alpha, beta) {\n    if (Date.now() > this.endTime) {\n      this.perfMonitor.setDepth(this.maxDepth - 1);\n      return EARLY_EXIT;\n    }\n\n    const prevAlpha = alpha;\n    const currHash = this.position.getHash();\n    const entry = this.transPosTable.getEntry(currHash);\n    if (entry && entry.depth >= depth) {\n      this.perfMonitor.logTableHit();\n      switch (entry.type) {\n        case TABLE_SCORE_TYPES.EXACT:\n          return entry.score;\n        case TABLE_SCORE_TYPES.LOWERBOUND:\n          alpha = Math.max(alpha, entry.score);\n          break;\n        case TABLE_SCORE_TYPES.UPPERBOUND:\n          beta = Math.min(beta, entry.score);\n          break;\n      }\n      if (alpha >= beta) { return entry.score; }\n    }\n\n    if (depth === 0) {\n      return this.quiescenceSearch(alpha, beta);\n    }\n\n    this.perfMonitor.logMainSearchNode();\n\n    let prevBestMove = (entry && entry.bestMove) ? entry.bestMove : null;\n    const siblingKillerMoves = this.killerMoveList.getSiblingMoves(this.maxDepth - depth);\n\n    function calculateMoveOrderScore(move) {\n      if (prevBestMove && move.val === prevBestMove.val) {\n        return 10000;\n      }\n      let score = move.getCaptPiece() ? ((1 + move.getCaptPiece()) / (1 + move.getPiece()) + 1): 0;\n      score = score * 10 + (siblingKillerMoves.includes(move.val) ? 1 : 0);\n      score = score * 10 + move.getPiece();\n      score = score * 10 + move.getType();\n\n      return score;\n    }\n\n    const moves = this.sortMoves(this.position.generatePseudoMoves(), calculateMoveOrderScore);\n\n    let moveIdx;\n    let canMove = false;\n    let result;\n    let score;\n    let bestScore = -Infinity;\n    let bestMove = null;\n\n    for (moveIdx = 0; moveIdx < moves.length; moveIdx++) {\n      if (this.position.makeMove(moves[moveIdx])) {\n        canMove = true;\n        result = this.negaMax(depth - 1, -beta, -alpha);\n        this.position.unmakePrevMove();\n\n        if (result === EARLY_EXIT) {\n          return result;\n        }\n\n        score = -result;\n        if (score > bestScore) {\n          bestScore = score;\n          bestMove = moves[moveIdx];\n\n          if (bestScore >= beta) {\n            this.killerMoveList.addMove(this.maxDepth - depth, moves[moveIdx]);\n            break;\n          }\n\n          if (bestScore > alpha) {\n            alpha = bestScore;\n          }\n        }\n      }\n    }\n\n    if (!canMove) {\n      if (this.position.inCheck(this.position.turn)) {\n        bestScore = -PUtils[PTypes.KINGS].value;\n      } else {\n        bestScore = 0;\n      }\n    }\n\n    this.transPosTable.storeEntry(bestScore, bestMove, prevAlpha, beta, depth, currHash);\n    return bestScore;\n  }\n\n  sortMoves(moves, calculateScore) {\n    function createMoveScores() {\n      return moves.map((move) => {\n        return { move: move, score: calculateScore(move) };\n      });\n    }\n\n    return createMoveScores().sort((moveA, moveB) => moveB.score - moveA.score)\n                             .map((moveScore) => moveScore.move);\n  }\n\n  evaluate() {\n    let materialScore = this.scoreMaterial(this.position.turn) -\n                        this.scoreMaterial(this.position.opp);\n\n    let piecePositionScore = this.scorePiecePositions(this.position.turn) -\n                             this.scorePiecePositions(this.position.opp);\n\n    return materialScore + piecePositionScore;\n  }\n\n  scoreMaterial(color) {\n    let score = 0;\n    eachPieceType((pieceType) => {\n      score += this.position.getColorPieceSet(color, pieceType).popCount() *\n               PUtils[pieceType].value;\n    });\n\n    return score;\n  }\n\n  scorePiecePositions(color) {\n    let score = 0;\n    let piecePositions;\n    eachPieceType((pieceType) => {\n      piecePositions = this.position.getColorPieceSet(color, pieceType);\n      piecePositions.dup().pop1Bits((pos) => {\n        score += PUtils[pieceType].positionValues[color ? pos : 56 ^ pos];\n      });\n    });\n\n    return score;\n  }\n}\n\nmodule.exports = MoveSearch;\n\n\n\n// WEBPACK FOOTER //\n// ./js/ai/move_search.js","const SCORE_TYPES = {\n  EXACT: 'exact',\n  UPPERBOUND: 'upperbound',\n  LOWERBOUND: 'lowerbound'\n};\n\nclass TransposTable {\n  constructor() {\n    this.table = {};\n  }\n\n  getEntry(key) {\n    return this.table[key] || null;\n  }\n\n  storeEntry(score, bestMove, alpha, beta, depth, key) {\n    this.table[key] = {\n      score,\n      bestMove,\n      type: this.determineScoreType(score, alpha, beta),\n      depth,\n      key\n    };\n  }\n\n  determineScoreType(score, alpha, beta) {\n    if (score <= alpha) {\n      return SCORE_TYPES.UPPERBOUND;\n    } else if (score >= beta) {\n      return SCORE_TYPES.LOWERBOUND;\n    } else {\n      return SCORE_TYPES.EXACT;\n    }\n  }\n}\n\nmodule.exports = { TransposTable, TABLE_SCORE_TYPES: SCORE_TYPES };\n\n\n\n// WEBPACK FOOTER //\n// ./js/ai/transpos_table.js","class KillerMoveList {\n  constructor() {\n    this.list = [];\n    this.maxPerLevel = 2;\n  }\n\n  addSlot() {\n    this.list.push(new Array(this.maxPerLevel));\n  }\n\n  addMove(distFromRoot, move) {\n    const siblingKillerMoves = this.list[distFromRoot];\n    if (siblingKillerMoves.includes(move.val)) { return; }\n\n    let idx;\n    for (idx = siblingKillerMoves.length - 2; idx >= 0; idx--) {\n      siblingKillerMoves[idx + 1] = siblingKillerMoves[idx];\n    }\n\n    siblingKillerMoves[0] = move.val;\n  }\n\n  getSiblingMoves(distFromRoot) {\n    return this.list[distFromRoot];\n  }\n}\n\nmodule.exports = KillerMoveList;\n\n\n\n// WEBPACK FOOTER //\n// ./js/ai/killer_move_list.js","class PerfMonitor {\n  constructor() {\n    this.mainSearchNodes = 0;\n    this.qSearchNodes = 0;\n    this.tableHits = 0;\n  }\n\n  setStartTime() {\n    this.startTime = new Date();\n  }\n\n  setEndTime() {\n    this.endTime = new Date();\n  }\n\n  setDepth(depth) {\n    this.depth = depth;\n  }\n\n  printResults() {\n    console.log('---------');\n\n    if (this.startTime && this.endTime) {\n      console.log(`Run Time: ${this.endTime - this.startTime}`);\n    }\n\n    console.log(`Depth:  ${this.depth}`);\n    console.log(`Total Explored Positions: ${this.qSearchNodes + this.mainSearchNodes}`);\n    console.log(`Main Search Nodes: ${this.mainSearchNodes}`);\n    console.log(`Quiescent Search Nodes: ${this.qSearchNodes}`);\n    console.log(`Table Hits: ${this.tableHits}`);\n\n    console.log('---------');\n  }\n\n  logTableHit() {\n    this.tableHits++;\n  }\n\n  logMainSearchNode() {\n    this.mainSearchNodes++;\n  }\n\n  logQuiescentNode() {\n    this.qSearchNodes++;\n  }\n\n  getResults() {\n    return {\n      runTime: this.endTime - this.startTime,\n      depth: this.depth,\n      exploredPositions: this.qSearchNodes + this.mainSearchNodes,\n      mainSearchNodes: this.mainSearchNodes,\n      qSearchNodes: this.qSearchNodes,\n      tTableHits: this.tableHits\n    };\n  }\n}\n\nmodule.exports = PerfMonitor;\n\n\n\n// WEBPACK FOOTER //\n// ./js/ai/perf_monitor.js","const { PieceConv, Colors } = require('../pieces');\nconst { ColsFiles, FilesCols,\n        RowsRanks, RanksRows } = require('./constants.js');\n\nfunction posFromFileRank(fileRank) {\n  const [file, rank] = fileRank.split('');\n  return (RanksRows[rank] * 8) + FilesCols[file];\n}\n\nfunction fileRankFromPos(pos) {\n  return ColsFiles[pos % 8] + (RowsRanks[Math.floor(pos / 8)]);\n}\n\n// if the row and col are either both even or both odd\nfunction isDarkSquare(fileRank) {\n  const [file, rank] = fileRank.split('');\n  const row = RanksRows[rank];\n  const col = FilesCols[file];\n  return (row % 2 === 0 && col % 2 === 0) ||\n         (row % 2 === 1 && col % 2 === 1);\n}\n\nfunction formatMove(move, color) {\n  return `${PieceConv.pieceToLetter(move.getPiece(), color)}:` +\n         `${fileRankFromPos(move.getFrom())}->` +\n         `${fileRankFromPos(move.getTo())}`;\n}\n\nfunction parseMoveStats(moveStats) {\n  return Object.keys(moveStats)\n               .map((key) => `${key}: ${moveStats[key]}`)\n               .join(\"<br/>\");\n}\n\nfunction formatTime(millisecs) {\n  let timeStr = (millisecs / 1000).toString();\n  if (timeStr.indexOf('.') == -1) timeStr += '.';\n\n  while (timeStr.length < timeStr.indexOf('.') + 3) {\n    timeStr += '0';\n  }\n\n  while (timeStr.length > timeStr.indexOf('.') + 3) {\n    timeStr = timeStr.slice(0, timeStr.length - 1);\n  }\n\n  return timeStr;\n}\n\nmodule.exports = {\n  posFromFileRank,\n  fileRankFromPos,\n  isDarkSquare,\n  formatMove,\n  parseMoveStats,\n  formatTime\n};\n\n\n\n// WEBPACK FOOTER //\n// ./js/ui/util.js","function generateMSBTable(max) {\n  let res = [];\n  let int;\n  for (int = 1; int <= max; int++) {\n    res[int] = Math.floor(Math.log2(int));\n  }\n\n  return res;\n}\n\nconst mostSigBitTable = generateMSBTable(255);\n\nfunction popCount32(int) {\n\tint -= (int >>> 1) & 0x55555555;\n\tint = (int & 0x33333333) + ((int >>> 2) & 0x33333333);\n\treturn ((int + (int >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;\n}\n\nfunction bitScanForward32(int) {\n  return popCount32((int & -int) - 1);\n}\n\nfunction bitScanReverse32(int) {\n  let res = 0;\n  if (int > 0xFFFF) {\n    int >>>= 16;\n    res += 16;\n  }\n\n  if (int > 0xFF) {\n    int >>>= 8;\n    res += 8;\n  }\n\n  return res + mostSigBitTable[int];\n}\n\nfunction clearLeastSigBit32(int) {\n  return (int & (int - 1));\n}\n\nmodule.exports = {\n  popCount32,\n  bitScanForward32,\n  bitScanReverse32,\n  clearLeastSigBit32\n};\n\n\n\n// WEBPACK FOOTER //\n// ./js/bitboard/int32Utils.js"],"sourceRoot":""}